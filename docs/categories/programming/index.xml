<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Mike&#39;s Blog</title>
    <link>https://michael-myers.github.io/blog/categories/programming/index.xml</link>
    <description>Recent content in Programming on Mike&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://michael-myers.github.io/blog/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A tour of Rust, Pt. 2</title>
      <link>https://michael-myers.github.io/blog/post/a-tour-of-rust-2/</link>
      <pubDate>Mon, 20 Mar 2017 22:56:03 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/a-tour-of-rust-2/</guid>
      <description>

&lt;p&gt;In my last post, I talked about what I think is the significance of the programming language Rust, and why I wanted to try learning it. Today, I take a look at &lt;a href=&#34;http://exercism.io&#34;&gt;Exercism.io&lt;/a&gt; (a sort-of social network for programming exercises) and its series of &lt;a href=&#34;http://exercism.io/languages/rust/about&#34;&gt;Rust challenges&lt;/a&gt;. These are definitely easy problems (so far); the focus is on learning how to solve them in a language that is new to you. We&amp;rsquo;ll see where I tripped up while trying to grasp some of the Rust language features, and some Rust I&amp;rsquo;ve learned so far.&lt;/p&gt;

&lt;h2 id=&#34;exercism-io-setup-and-workflow&#34;&gt;Exercism.io Setup and Workflow&lt;/h2&gt;

&lt;p&gt;Assuming you also use MacOS with Homebrew, it&amp;rsquo;s just a couple of steps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update &amp;amp;&amp;amp; brew install exercism
$ exercism configure --key=YOUR_API_KEY
$ exercism configure --dir=~/Documents/Exercism
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then each new programming exercise is fetched this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ exercism fetch rust		# will download the next exercise, &amp;quot;whatever&amp;quot;
$ cd ~/Documents/Exercism/whatever
$ mkdir src &amp;amp;&amp;amp; touch src/lib.rs   # then, work on your solution in lib.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each exercise asks you to write a Rust library that exports a function or two, such that you implement some behavior instructed in the README.md for that exercise. The folder structure provided is that of a &lt;a href=&#34;http://doc.rust-lang.org/stable/book/crates-and-modules.html&#34;&gt;Rust &amp;ldquo;crate&amp;rdquo;&lt;/a&gt;, which is what Rust (or rather, its build tool, Cargo) calls a source package. You will define a &lt;code&gt;pub fn whatev()&lt;/code&gt; in &lt;code&gt;src/lib.rs&lt;/code&gt;, which is the filename convention for a Rust &lt;em&gt;library&lt;/em&gt; crate (as opposed to an &lt;em&gt;executable&lt;/em&gt; crate, which would have a &lt;code&gt;fn main()&lt;/code&gt; defined in a &lt;code&gt;src/main.rs&lt;/code&gt;). &lt;code&gt;Cargo.toml&lt;/code&gt; is the manifest file that defines the crate: the version string, the dependencies, author.&lt;/p&gt;

&lt;p&gt;Each challenge comes with unit tests in &lt;code&gt;tests/whatever.rs&lt;/code&gt; (technically, integration tests. Rust allows you to write the unit tests inline with the source files themselves). &lt;a href=&#34;https://doc.rust-lang.org/book/testing.html&#34;&gt;You can run the tests using Rust&amp;rsquo;s build tool, Cargo&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo test	# both compiles your library and runs the tests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you &lt;em&gt;just&lt;/em&gt; wanted to compile, you could run &lt;code&gt;cargo build&lt;/code&gt;. Were this an executable crate rather than a library crate, you could also &lt;code&gt;cargo run&lt;/code&gt;, but with a library crate &lt;code&gt;run&lt;/code&gt; has no meaning, so we &lt;code&gt;cargo test&lt;/code&gt;. Note: if you had noticed that the binaries are rather large, that is because Cargo builds debug binaries by default. For release, you would use &lt;code&gt;cargo build —release&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once all of the unit tests pass for an exercise, you can submit your solution like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ exercism submit src/lib.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rust-debugging-in-the-vs-code-editor&#34;&gt;Rust Debugging in the VS Code editor&lt;/h2&gt;

&lt;p&gt;Although I discussed setting up a Rust development environment in the last post, Andrew Hobden has also documented &lt;a href=&#34;https://hoverbear.org/2017/03/03/setting-up-a-rust-devenv/&#34;&gt;the setup and use of other tools in the Rust development toolchain&lt;/a&gt;, and his writeup may be worth a look. For me right now, I don&amp;rsquo;t want the added headache of trying to work with any alpha or &amp;ldquo;nightly build&amp;rdquo; features of Rust. What was important for me was &lt;a href=&#34;https://code.visualstudio.com/Docs/editor/debugging&#34;&gt;debugging in VS Code&lt;/a&gt;, so I appreciated his help with that. While I previously had no luck getting the &amp;ldquo;Native Debug&amp;rdquo; VS Code extension to work, using Andrew&amp;rsquo;s instructions, I did get the &amp;ldquo;LLDB Debugger&amp;rdquo; extension to work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But do you need to manually recreate .vscode/launch.json and .vscode/tasks.json for every project you want to debug? That blows&lt;/em&gt; – Well sort of. In VS Code you can click the debug icon in the sidebar and then the settings wheel icon in the debug pane that appears, and VS Code will create a mostly-complete launch.json file to which you just have to add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;preLaunchTask&amp;quot;: &amp;quot;cargo&amp;quot;,
&amp;quot;sourceLanguages&amp;quot;: [&amp;quot;rust&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course, you&amp;rsquo;ll have to fix the final part of the path for &amp;ldquo;program&amp;rdquo; (your debug target). So there isn&amp;rsquo;t that much to do manually for each new project. But when you tell VS Code to run a &amp;ldquo;preLaunchTask&amp;rdquo;, as above, you then have to define that &amp;ldquo;task&amp;rdquo; in a &lt;code&gt;.vscode/tasks.json&lt;/code&gt; file, but it&amp;rsquo;s the same every time, just copy and paste it from your last project. A hassle compared to debugging with a real IDE, but a minor hassle at least.&lt;/p&gt;

&lt;h2 id=&#34;exercism-exercises-1-10&#34;&gt;Exercism Exercises 1-10&lt;/h2&gt;

&lt;h3 id=&#34;1-hello-world-and-strings-in-rust&#34;&gt;1: Hello World, and strings in Rust&lt;/h3&gt;

&lt;p&gt;It looks like the developers of this challenge changed their answer format somewhere along the way during development, and now it actually contains conflicting instructions. Fortunately, this is the only challenge with this problem, but ignore the README.md this time as well as the GETTING_STARTED.md. As with most of these challenges, the most important file is &lt;code&gt;tests/hello-world.rs&lt;/code&gt; which defines the Cargo unit tests and gives the guiding examples of what your code is supposed to produce. In this case, it is very simple, you just need to produce the string &amp;ldquo;Hello, World!&amp;rdquo; using a function called &lt;code&gt;fn hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what is the correct function declaration for &lt;code&gt;fn hello&lt;/code&gt;? First, it has to be a function that is &lt;em&gt;published&lt;/em&gt; by your Rust library for external callers, thus it is &lt;code&gt;pub fn hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is not taking any arguments (despite what the muddled insructions state), so it is &lt;code&gt;pub fn hello()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And it returns a string, so it is…uh-oh. Here, Rust makes this harder than you might expect. There is the primitive type for representing strings, &lt;code&gt;str&lt;/code&gt;, and then there is a &lt;code&gt;String&lt;/code&gt; type (from the Rust standard library). They seem similar and completely redundant at first, but their purposes and usages are different in a variety of ways that will trip you up if you don&amp;rsquo;t understand what each one means. This duality of Strings and string literals is essential to understand, and it is poorly explained (if explained at all) in every Rust tutorial I&amp;rsquo;ve seen. If people need to write &lt;a href=&#34;http://hermanradtke.com/2015/05/03/string-vs-str-in-rust-functions.html&#34;&gt;long posts explaining the difference&lt;/a&gt;, I think the language documentation could be doing a better job here.&lt;/p&gt;

&lt;p&gt;Complicating matters, &lt;code&gt;str&lt;/code&gt; is used synonymously in Rust documentation with &amp;ldquo;string&amp;rdquo; and &amp;ldquo;string literal&amp;rdquo;, and a reference to a subset of a &lt;code&gt;String&lt;/code&gt; is an &lt;code&gt;&amp;amp;str&lt;/code&gt;, a.k.a. &amp;ldquo;string slice&amp;rdquo;. In fact, a function that takes a &lt;code&gt;&amp;amp;str&lt;/code&gt; can be passed a &lt;code&gt;&amp;amp;String&lt;/code&gt; (a concept in Rust called &lt;em&gt;coercion&lt;/em&gt;, i.e. implicit type conversion), but a function that takes a &lt;code&gt;&amp;amp;String&lt;/code&gt; cannot be passed a &lt;code&gt;&amp;amp;str&lt;/code&gt;. Wow. Confused yet? Just wait until you try to concatenate two strings. We&amp;rsquo;ll get to that later.&lt;/p&gt;

&lt;p&gt;If you choose to use &lt;code&gt;String&lt;/code&gt;, the return type is simple to understand, but you have to build a &lt;code&gt;String&lt;/code&gt; instance out of a string literal using &lt;code&gt;.to_string()&lt;/code&gt; or &lt;code&gt;String::from&lt;/code&gt;, which is non-obvious:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub fn hello() -&amp;gt; String {
  &amp;quot;Hello, World!&amp;quot;.to_string()  // alternatively, String::from(&amp;quot;Hello, World!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you choose instead to use &lt;code&gt;str&lt;/code&gt;, the actual returned value needs nothing special, but the return type is by &lt;a href=&#34;http://intorust.com/tutorial/shared-borrows/&#34;&gt;&lt;em&gt;borrowed reference&lt;/em&gt;&lt;/a&gt; (hence the ampersand) and requires a &lt;em&gt;lifetime&lt;/em&gt; specifier, something unique to Rust:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub fn hello() -&amp;gt; &amp;amp;&#39;static str {
    &amp;quot;Hello, World!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is to say, &lt;code&gt;hello()&lt;/code&gt; returns a reference to an immutable string literal. In other words, a pointer to the string &amp;ldquo;Hello, World!&amp;rdquo; and the caller of hello() cannot change that string using a dereference of this pointer. The reference is valid for &lt;code&gt;static&lt;/code&gt;, a lifetime duration defined as the &amp;ldquo;duration of the entire program.&amp;rdquo; This is basically a guarantee to the caller that this reference will always be valid. String literals will always get a static lifetime because they&amp;rsquo;re hard-coded in the compiled Rust binary&amp;rsquo;s data section; they are never deallocated.&lt;/p&gt;

&lt;p&gt;So, with a simple HelloWorld example we&amp;rsquo;ve had to introduce ourselves to the three big concepts unique to Rust: &lt;strong&gt;ownership&lt;/strong&gt;, &lt;strong&gt;reference borrowing&lt;/strong&gt;, and &lt;strong&gt;lifetimes&lt;/strong&gt;. We&amp;rsquo;ve also tripped over the &lt;code&gt;str&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; duality and the concept of &lt;a href=&#34;https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md&#34;&gt;coercion&lt;/a&gt;. As we struggle to comprehend these concepts, they&amp;rsquo;ll be responsible for the majority of our compile-time errors. This is the Rust learning curve.&lt;/p&gt;

&lt;h3 id=&#34;2-gigasecond-and-including-external-crates&#34;&gt;2: Gigasecond, and including external crates&lt;/h3&gt;

&lt;p&gt;Hint, for this one, you&amp;rsquo;ll be needing the &lt;a href=&#34;https://github.com/chronotope/chrono&#34;&gt;Chrono&lt;/a&gt; crate, because the Rust standard library currently has no library for handling the concept of time. Your lib.rs file begins with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;extern crate chrono;
use chrono::*;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And your Cargo.toml file declares this dependency as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]
chrono = &amp;quot;0.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you &lt;code&gt;cargo test&lt;/code&gt;, Cargo will automatically fetch and install the crate &amp;ldquo;Chrono&amp;rdquo; for you. Nice! Now you can add seconds to times and compare times to one another.&lt;/p&gt;

&lt;p&gt;The instructions for this challenge may mislead you to try to use the caret as an exponentiation operator:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A gigasecond is 10^9 (1,000,000,000) seconds.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, but Rust (like C before it) lacks an exponentiation operator. Not only does &lt;code&gt;10^9&lt;/code&gt; &lt;em&gt;not&lt;/em&gt; define the value &lt;code&gt;1_000_000_000&lt;/code&gt;, it also doesn&amp;rsquo;t generate a compile-time error. Instead, it is interpreted as the bitwise XOR of 10 and 9: in other words, 10^9 equals 3 (surprise, LOL). Again, the official Rust documentation (&amp;ldquo;The Rust Programming Language&amp;rdquo;) is a bit lacking with its complete absence of explanation of the operators that Rust actually has and does not have, a fundamental part of any language. Instead, you should consult the &amp;ldquo;Rust Language Reference&amp;rdquo; for this information. That said, if you really want to do exponentiation, several of the primitive types have exponentiation methods: the floating point types &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; which offer the &lt;code&gt;powi(i32)&lt;/code&gt; method, and the integer types &lt;code&gt;i32&lt;/code&gt; and &lt;code&gt;i64&lt;/code&gt; which offer &lt;code&gt;pow(u32)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let ten = 10_i64;
ten.pow(9)  // this is 1,000,000,000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-leap-and-the-modulus-operator&#34;&gt;3: Leap, and the modulus operator&lt;/h3&gt;

&lt;p&gt;There is little to learn from this exercise except the proper use of the % operator, which, again, was up to you to find in the Language Reference. It&amp;rsquo;s an &amp;ldquo;either you know this trick or you don&amp;rsquo;t&amp;rdquo; challenge, but popular in whiteboard programming questions in job interviews, and occasionally useful in real life. Example snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// On every year that is evenly divisible by 4:
    if candidate_year % 4 == 0 {
        // Except every year that is evenly divisible by 100:
        if candidate_year % 100 == 0 {
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-raindrops-and-the-modulus-operator-again&#34;&gt;4: Raindrops, and the modulus operator again&lt;/h3&gt;

&lt;p&gt;This is a simple integer-to-string (hint: &lt;code&gt;some_value.to_string()&lt;/code&gt;) and integer-factoring challenge. Again, the modulo operator is all you need, and this exercise fails to add any new lesson really.&lt;/p&gt;

&lt;h3 id=&#34;5-bob-and-iterators&#34;&gt;5: Bob, and iterators&lt;/h3&gt;

&lt;p&gt;Given some &lt;code&gt;&amp;amp;str prompt&lt;/code&gt; you can iterate over every character in the string in a for loop, without having to use pointers or indices as a C programmer is tempted to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;for character in prompt.chars() {
	// do stuff to each character
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in fact, it is basically impossible to loop across a &lt;code&gt;str&lt;/code&gt; in any other way, because you cannot use array indexing on a &lt;code&gt;str&lt;/code&gt; as you might with a string in C, and create a for loop that ranges from prompt[0] to prompt[prompt.len()]. Even for Rust types where that pattern &lt;em&gt;is&lt;/em&gt; possible, it is discouraged: find your loop ranges using iterators, which are returned by methods like &lt;code&gt;.chars()&lt;/code&gt; or &lt;code&gt;.iter()&lt;/code&gt;. The code above automatically turns &lt;code&gt;character&lt;/code&gt; into a value of type &lt;code&gt;char&lt;/code&gt; because &lt;code&gt;prompt.chars&lt;/code&gt; is a range of &lt;code&gt;char&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type has some handy methods, for example: &lt;code&gt;if character.is_alphabetic()&lt;/code&gt; and &lt;code&gt;if character.is_uppercase()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;6-beer-song-string-concatenation-and-the-match-statement&#34;&gt;6: Beer Song, string concatenation, and the match statement&lt;/h3&gt;

&lt;p&gt;String concatenation in Rust is completely bonkers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let a = &amp;quot;foo&amp;quot;;
let b = &amp;quot;bar&amp;quot;;

println!(&amp;quot;{}&amp;quot;, a + b);                          // invalid
let c = a + &amp;amp;b;                                 // invalid
let c: String = a + b.to_string();              // invalid
let c: String = a.to_string() + b.to_string(); 	// invalid

let c: String = a.to_string() + b;              // valid!
let c: String = a.to_string() + &amp;amp;b.to_string(); // valid!
c.push_str(&amp;quot; more stuff on the end&amp;quot;);           // valid!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The strings &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; here are &lt;code&gt;str&lt;/code&gt; instances. The &lt;code&gt;str&lt;/code&gt; type lacks any kind of concatenation operator, so you can&amp;rsquo;t use a &lt;code&gt;+&lt;/code&gt; to concatenate them &lt;em&gt;when the left operand is a &lt;code&gt;str&lt;/code&gt;&lt;/em&gt;. However &lt;em&gt;when the left operand is a &lt;code&gt;String&lt;/code&gt;&lt;/em&gt; you &lt;strong&gt;totally can&lt;/strong&gt; use the &lt;code&gt;+&lt;/code&gt; because &lt;code&gt;String&lt;/code&gt; &lt;strong&gt;does&lt;/strong&gt; have the concatenation operator.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; type is growable, whereas &lt;code&gt;str&lt;/code&gt; is an annoyingly restricted type of data that mucks up everything it touches. You can&amp;rsquo;t build a &lt;code&gt;str&lt;/code&gt; out of other &lt;code&gt;str&lt;/code&gt;; you can&amp;rsquo;t even build a &lt;code&gt;String&lt;/code&gt; out of two &lt;code&gt;str&lt;/code&gt; without bending yourself into a pretzel. You may seek to avoid &lt;code&gt;str&lt;/code&gt; altogether, but you can&amp;rsquo;t. Because every Rust string literal &lt;em&gt;is&lt;/em&gt; a &lt;code&gt;str&lt;/code&gt;, we are forced to work with both &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;, upconverting the former to the latter with &lt;code&gt;.to_string()&lt;/code&gt;, and/or connecting them onto the end of a &lt;code&gt;String&lt;/code&gt; with its &lt;code&gt;.push_str()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;But at least you can use the &lt;code&gt;match&lt;/code&gt; keyword to help with this challenge:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Form the appropriate English words to refer to the bottle or bottles:
fn bottles(quantity: u32) -&amp;gt; String {
    match quantity {
        0 =&amp;gt; &amp;quot;No more bottles&amp;quot;.to_string(),
        1 =&amp;gt; &amp;quot;1 bottle&amp;quot;.to_string(),
        _ =&amp;gt; quantity.to_string() + &amp;quot; bottles&amp;quot;,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a lot cleaner than an if—else-if—else would have been.&lt;/p&gt;

&lt;h3 id=&#34;7-difference-of-squares&#34;&gt;7: Difference of Squares&lt;/h3&gt;

&lt;p&gt;This one should be a review, you can use iterators (in the form of for-loop ranges), and exponentiation isn&amp;rsquo;t necessary if you just want to do squares:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let somevalue = 123;
let mut square;
square = somevalue * somevalue;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-sum-of-multiples&#34;&gt;8: Sum of Multiples&lt;/h3&gt;

&lt;p&gt;Another review challenge. Tests you again on using iterators, and the modulus operator (&amp;ldquo;is a multiple of x&amp;rdquo; is synonymous with &amp;ldquo;is cleanly divisible by x&amp;rdquo;). You might use nested loops, or maybe something fancier like closures. I think this post is long enough without addressing that concept.&lt;/p&gt;

&lt;h3 id=&#34;9-grains-and-the-panic-macro&#34;&gt;9: Grains, and the panic macro&lt;/h3&gt;

&lt;p&gt;Back on exercise 2 we learned how to do exponentiation in Rust, so that&amp;rsquo;s half of this challenge. The other hint is that the unit tests are testing for error conditions indicated by &amp;ldquo;panic.&amp;rdquo; The way to panic in Rust is via the panic macro:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;if s &amp;lt; 1 || s &amp;gt; 64 {
	panic!(&amp;quot;Square must be between 1 and 64&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-hamming-unwrap-and-the-result-type&#34;&gt;10: Hamming, unwrap, and the Result type&lt;/h3&gt;

&lt;p&gt;And finally (for now), we learn how to multiplex a return value and an error condition into &lt;a href=&#34;https://doc.rust-lang.org/std/result/&#34;&gt;one type, &lt;code&gt;Result&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we choose the return value for our function to be &lt;code&gt;-&amp;gt; Result&amp;lt;i32, &amp;amp;&#39;static str&amp;gt;&lt;/code&gt; then we are declaring that we might return either &lt;code&gt;Ok(123)&lt;/code&gt; or &lt;code&gt;Err(&amp;quot;Something went wrong&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some of the unit tests are checking to see if the returned condition is an error of any kind: &lt;code&gt;.is_err()&lt;/code&gt;. Using &lt;code&gt;Err()&lt;/code&gt; satisfies that check.&lt;/p&gt;

&lt;h2 id=&#34;rust-initial-impressions&#34;&gt;Rust Initial Impressions&lt;/h2&gt;

&lt;p&gt;So after getting beyond &amp;ldquo;Hello world&amp;rdquo; and trying a few exercises, my initial impressions of Rust as a language are that its strictness is its defining characteristic. You could even say it&amp;rsquo;s a pain, honestly, not what I could call a joy to work in (although speaking ill of Rust invites the fans to show up and blame you for failing to love it). The payoff doesn&amp;rsquo;t have to be rapid prototyping joy, though, it just has to be the more secure code that you are ostensibly creating by being so strict and explicit about everything. That&amp;rsquo;s okay too.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;The Good&lt;/th&gt;
&lt;th&gt;The Bad&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cargo build tool&lt;/td&gt;
&lt;td&gt;The official documentation for Rust&amp;rsquo;s language and standard library&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Passionate community&lt;/td&gt;
&lt;td&gt;Condescending comments like &amp;ldquo;I can tell you&amp;rsquo;re an imperative language guy&amp;rdquo; when you don&amp;rsquo;t use closures&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rustfmt&lt;/code&gt; for automated code style enforcement (&lt;code&gt;cargo fmt&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;Learning curve for the errors emitted by the Rust compiler&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Rust can be debugged with &lt;code&gt;rust-lldb&lt;/code&gt; or &lt;code&gt;rust-gdb&lt;/code&gt; and this mostly works within VS Code&lt;/td&gt;
&lt;td&gt;Your errors will all be compile-time anyway, for better or worse&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Expressive method names like .is_alphabetic() are a welcome improvement to C standard lib&lt;/td&gt;
&lt;td&gt;Any time you have to use strings (String vs str, string concatenation, etc.) you will wonder if Rust will ever catch on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>A Look at the Rust Programming Language</title>
      <link>https://michael-myers.github.io/blog/post/a-tour-of-rust/</link>
      <pubDate>Mon, 27 Feb 2017 13:06:16 -0500</pubDate>
      
      <guid>https://michael-myers.github.io/blog/post/a-tour-of-rust/</guid>
      <description>

&lt;h2 id=&#34;where-to-find-more-execution-performance&#34;&gt;Where to Find More Execution Performance&lt;/h2&gt;

&lt;p&gt;Moore&amp;rsquo;s Law &lt;a href=&#34;http://fortune.com/2017/01/05/intel-ces-2017-moore-law/&#34;&gt;is just about done&lt;/a&gt;. It once described a trend of transistor count doubling every 24 months (enabled by increasing the density of transistors by making them ever-smaller). Now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Between the introduction of 65 nm and 45 nm chips, about 23 months passed. To get from 45 nm to 32 nm took about 27 months, 28 months to go down from there to 22 nm and 30 months to shrink to the current 14 nm process. And that&amp;rsquo;s where Intel has been stuck since September 2014.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intel &lt;em&gt;might&lt;/em&gt; release 10nm scale chips in late 2017, which would mean that they worked 36-40 months in order to shrink from 14nm to 10nm scale. In other words, the most recent density doubling (the shrink from 22nm to 10nm), by the time it happens, will have taken over 5 years. The next doubling is likely to take at least that long, assuming the multiple breakthroughs required to do so can even be achieved. 10nm is already fairly close to the atomic scale: ~45 silicon &lt;em&gt;atoms&lt;/em&gt; across (one atom: 0.22nm). One of the obstacles at this scale to be addressed is &lt;a href=&#34;https://en.wikipedia.org/wiki/Quantum_tunnelling&#34;&gt;quantum tunneling&lt;/a&gt;, not that I pretend to understand it.&lt;/p&gt;

&lt;p&gt;Of course, Moore&amp;rsquo;s Law can be satisfied one other way without changing density, which is to simply use bigger and bigger processor dies. You may have seen charts showing that transistor &lt;em&gt;count&lt;/em&gt; continues to increase on schedule with Moore&amp;rsquo;s Law, but this is only true for dedicated GPUs and high-end server CPUs, which are already up against cost practicality limits due to these die sizes.&lt;/p&gt;

&lt;p&gt;Even if we were still on track for Moore&amp;rsquo;s Law, increasing transistor counts alone have &lt;a href=&#34;https://cartesianproduct.wordpress.com/2013/04/15/the-end-of-dennard-scaling/&#34;&gt;provided diminishing returns as of late&lt;/a&gt;. Recent density increases have mainly just served to reduce power draw and to make more space on the CPU die dedicated to graphics rendering (an ideal parallelizable task). Tech being an optimistic culture makes it slow to acknowledge the obvious truth here: CPU &lt;em&gt;cores&lt;/em&gt; aren&amp;rsquo;t getting significantly faster. Unless your work is on a mobile device or can be delegated to a GPU or server farm, your only performance upgrades since 2010 have been I/O-related ones.&lt;/p&gt;

&lt;p&gt;Granted, transistor density improvements have continued to increase CPU power efficiency. But I have a Intel &amp;ldquo;Core i7&amp;rdquo; (2.66 GHz i7-620M, 2-core) laptop that will turn 7 years old in a couple of months, and today&amp;rsquo;s equivalent CPUs &lt;em&gt;still&lt;/em&gt; offer only a marginal performance improvement for tasks that aren&amp;rsquo;t 3D graphics. The equivalent CPU today, the Intel &amp;ldquo;Core i7&amp;rdquo; (2.7GHz i7-7500U, 2-core), has single-threaded performance only about 60% better than my CPU from 7 years ago. Not enough to make me throw out my old laptop.&lt;/p&gt;

&lt;p&gt;All of this background is to make my point, which is that the next performance leap has to come from improved software, rather than relying on &amp;ldquo;free&amp;rdquo; improvements from new hardware. A few software methods for achieving a generational improvement in performance might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallelism&lt;/li&gt;
&lt;li&gt;Optimizing compilers&lt;/li&gt;
&lt;li&gt;Moving tasks from interpreted languages back to compiled languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these things are already happening, but it&amp;rsquo;s the last one that I&amp;rsquo;m interested in most.&lt;/p&gt;

&lt;h2 id=&#34;parallelism&#34;&gt;Parallelism&lt;/h2&gt;

&lt;p&gt;Parallelism has brought great performance improvements in graphics, &amp;ldquo;AI,&amp;rdquo; and large data set processing (so-called &amp;ldquo;Big Data&amp;rdquo;), and is the reason why GPUs &lt;a href=&#34;https://en.wikipedia.org/wiki/Transistor_count#GPUs&#34;&gt;continue to march forward in transistor count&lt;/a&gt; (although, again, check out those increasing die sizes; those are approaching their own limits of practicality). The problem with parallelism, though, is that while there are some workloads that are naturally suited to it, others aren&amp;rsquo;t and never will be. Sometimes, computing Task B is dependent on the outcome of Task A, and there is just no way to split up Task A. Even when parts of a task &lt;em&gt;can&lt;/em&gt; be parallelized, there are swiftly diminishing returns to adding more cores, as described &lt;a href=&#34;https://en.wikipedia.org/wiki/Amdahl%27s_law&#34;&gt;by Amdahl&amp;rsquo;s Law&lt;/a&gt;. What parallelized processing &lt;em&gt;does&lt;/em&gt; scale well for &lt;a href=&#34;https://en.wikipedia.org/wiki/Gustafson%27s_law&#34;&gt;is large data sets&lt;/a&gt;, although the home user is not typically handling large data sets, and won&amp;rsquo;t directly benefit from this kind of parallelism.&lt;/p&gt;

&lt;h2 id=&#34;optimizing-compilers&#34;&gt;Optimizing Compilers&lt;/h2&gt;

&lt;p&gt;Here are &lt;a href=&#34;https://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf&#34;&gt;Daniel J Bernstein&amp;rsquo;s 2015 slides&lt;/a&gt; about the death of &amp;ldquo;optimizing compilers,&amp;rdquo; or rather, that despite all the hype about them, we are still manually tuning the performance critical portions of our programs. The optimizing compilers&amp;rsquo; optimization of non-critical code portions is irrelevant, or at least not worth the effort put into optimizing compilers. It appears that a compiler to generically optimize any code as well as an expert human could, would require something like a &lt;a href=&#34;https://en.wikipedia.org/wiki/Artificial_general_intelligence&#34;&gt;general AI&lt;/a&gt; with a full contextual understanding of the problem being solved by the code. Such a thing doesn&amp;rsquo;t exist, and is not on the horizon.&lt;/p&gt;

&lt;h2 id=&#34;better-safer-compiled-languages&#34;&gt;Better (Safer) Compiled Languages&lt;/h2&gt;

&lt;p&gt;C and C++ never really left us, and neither have all of the inherent memory errors in code programmed in C and C++. That includes Java, whose runtime is still written in C. The Java runtime has been the source of many &amp;ldquo;Java&amp;rdquo; security issues over the years, to the point where the Java plug-in was effectively banned from all web browsers. Despite that, the rest of the browser is also written in C and C++, and just as prone to these problems. There hasn&amp;rsquo;t been any viable alternative but to try to sandbox and privilege-reduce the browser, because any safer language is too slow.&lt;/p&gt;

&lt;p&gt;The real cost of C and C++ &amp;rsquo;s performance is their high maintenance burdens: coding in them means always opening up subtle concurrency errors, memory corruption bugs, and information leak vulnerabilities. This is why simply improving the C++ standard library and adding more and more features to the language has not altered its basic value proposition to developers, who have already fled to &amp;ldquo;safe&amp;rdquo; languages.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s where the experimental language, Rust, comes in. It&amp;rsquo;s a compiled systems programming language with performance on par with (&lt;a href=&#34;http://benchmarksgame.alioth.debian.org/u64q/which-programs-are-fastest.html&#34;&gt;or better than&lt;/a&gt;) C++, but with compile-time restrictions on memory management and concurrency that should prevent entire classes of bugs. At some point in the next 5 years, I predict that we will see Rust (or something like it, whether it&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Swift_(programming_language)&#34;&gt;Swift&lt;/a&gt; or some new really strict C++ compiler) slowly start replacing C/C++ wherever performance and security are both primary concerns. It&amp;rsquo;s exciting to think that a well-designed compiled language could solve most of the reasons for the ~20-year flight away from native code programming.&lt;/p&gt;

&lt;p&gt;Having played with Rust for a few days, I can say it will certainly not replace Python for &lt;em&gt;ease&lt;/em&gt; of development, but it&amp;rsquo;s a really interesting disruptor for anyone writing native code. Security researchers should also take notice.&lt;/p&gt;

&lt;h2 id=&#34;rust-programming-language&#34;&gt;Rust Programming Language&lt;/h2&gt;

&lt;p&gt;For what it&amp;rsquo;s worth, Rust was the “Most Loved Programming Language of 2016 in the Stack Overflow Developer Survey.” It enforces memory management and safety at compile-time. Some memory safety features of the language include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rust does not permit null pointers or dangling pointers. Since pointers are never NULL, you can always safely dereference a pointer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are no “void” pointers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pointers can not be downcast to a more specific type, only upcast to a more generic type. If generic data structures are needed, you use parameterized types/functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variables can be allocated on the heap and are cleaned up without the need for “free” or “delete.”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Concurrent-access race conditions are impossible, because every piece of data is either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mutable (reference from a single &amp;ldquo;owner&amp;rdquo; at a time, owner re-assigned if needed) &lt;strong&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;immutable (multiple references can exist)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;there can be only one mutable reference, or an aribtrary number of immutable references to the same allocation, but never both&lt;/em&gt; [credit: &lt;a href=&#34;https://twitter.com/vitiral&#34;&gt;@vitiral&lt;/a&gt;])&lt;/p&gt;

&lt;p&gt;If you just wanted a statically typed, compiled language with a modern standard library that is easy to extend, you could also choose Go. But Rust claims to be all of that, plus faster and safer. Rust will work in embedded devices and other spaces currently occupied by C/C++; Go will not. &lt;a href=&#34;http://yager.io/programming/go.html&#34;&gt;Some think Rust is just fundamentally better&lt;/a&gt;, but I am not qualified to judge that.&lt;/p&gt;

&lt;h3 id=&#34;rust-and-parallelism&#34;&gt;Rust and parallelism&lt;/h3&gt;

&lt;p&gt;Rust makes parallelization an integral part of the language, with support for all of the necessary parallel programming primitives. Parallelized versions of various programming constructs can be swapped in without changing your existing code. This is possible because the Rust language forces the programmer to specify more about how data will be used, which prevents race conditions at runtime by turning them into errors at compile time, instead.&lt;/p&gt;

&lt;h3 id=&#34;concept-of-ownership-in-rust&#34;&gt;Concept of &amp;ldquo;Ownership&amp;rdquo; in Rust&lt;/h3&gt;

&lt;p&gt;The major innovation of the Rust language (inspired by a prior language, &amp;ldquo;Cyclone&amp;rdquo;) is that its compiler, in order to do memory management and prevent race conditions at compile time, tracks &amp;ldquo;ownership&amp;rdquo; of all variables in the code. Once a variable is used (like in a call to a function) it is considered to be passed to a new &amp;ldquo;owner,&amp;rdquo; and using it in a subsequent statement is illegal and would trigger a compiler error. If the developer&amp;rsquo;s intention was to copy-on-use (&amp;ldquo;clone&amp;rdquo;), they must specify that in their code. For certain simple data types (integers, etc.), they are automatically copied-on-use without any explicit intent from the developer. Another aspect of ownership in Rust is that all variables are (what in C/C++ would be called) &lt;code&gt;const&lt;/code&gt;, by default. In Rust, if you want a variable to be mutable, it has to be explicitly stated in the declaration.&lt;/p&gt;

&lt;p&gt;This concept is the foundation of the Rust language. It&amp;rsquo;s hard to grasp at first, since it is very different from programming in C or C++, or even Java. The most detailed explanation of Rust ownership that I&amp;rsquo;ve seen is &lt;a href=&#34;https://chrismorgan.info/blog/rust-ownership-the-hard-way.html&#34;&gt;this article by Chris Morgan&lt;/a&gt;, but to actually learn the concept I&amp;rsquo;d recommend starting with &lt;a href=&#34;http://intorust.com/tutorial/ownership/&#34;&gt;this 25 minute video by Nikolas Matsakis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first, it seems like another mental burden on the programmer, but adopting this concept of memory management means the programmer is also &lt;em&gt;relieved&lt;/em&gt; of having to manage memory with carefully paired calls to &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt; (or &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;). &amp;ldquo;So what, isn&amp;rsquo;t this what you get with C# or Java?&amp;rdquo; Not quite: those languages use a Garbage Collector to track references to data at &lt;em&gt;runtime&lt;/em&gt;, which has an inherent performance overhead and whose &amp;ldquo;stop-the-world&amp;rdquo; resource management can be &lt;a href=&#34;http://stackoverflow.com/questions/16695874/why-does-the-jvm-full-gc-need-to-stop-the-world&#34;&gt;inconsistent and unpredictable&lt;/a&gt;. Rust does it in the language, at compile time. &lt;em&gt;So, without the use of a Garbage Collector, Rust makes memory management (and concurrent access to data) safe again.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;rust-is-a-drop-in-replacement-for-c&#34;&gt;Rust is a Drop-In Replacement for C&lt;/h3&gt;

&lt;p&gt;Just like C/C++, Rust can &lt;a href=&#34;https://blog.sentry.io/2016/10/19/fixing-python-performance-with-rust&#34;&gt;be coupled to Python or any other language with a native interface, in order to leverage the strengths of both&lt;/a&gt;. And, debugging Rust programs is officially &lt;a href=&#34;https://www.mail-archive.com/info-gnu@gnu.org/msg02192.html&#34;&gt;supported by GDB&lt;/a&gt;. This works the other way around too, i.e., you can build a Rust program on top of native code libraries written in C/C++. Mozilla is even working on &lt;a href=&#34;https://servo.org&#34;&gt;a web browser engine in Rust&lt;/a&gt;, to replace Gecko, the Firefox engine. &lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTgzNDA&#34;&gt;Benchmarks in 2014&lt;/a&gt; showed a 300% increase in performance vs Gecko, and by early 2016, it was &lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Google-Servo-Perf-Comparison&#34;&gt;beating Webkit and Chrome as well&lt;/a&gt; (at least in some hand-picked benchmarks where they leverage Rust&amp;rsquo;s ease of parallelism to delegate a bunch of stuff to the GPU). If you&amp;rsquo;re interested in the details of how Rust can improve browser engines, Mozilla &lt;a href=&#34;https://arxiv.org/pdf/1505.07383v1.pdf&#34;&gt;wrote about it here&lt;/a&gt;. Buried in the paper is a detail that they seem to have downplayed elsewhere, though: the new browser engine is actually still bootstrapped by an existing codebase, so it&amp;rsquo;s still 75% C/C++ code. On the other hand, that also goes to show how Rust integrates well with C/C++.&lt;/p&gt;

&lt;h3 id=&#34;rust-has-a-package-manager-which-is-also-its-build-tool&#34;&gt;Rust has a Package Manager, which is also its Build Tool&lt;/h3&gt;

&lt;p&gt;Makefiles are impossible to write and debug, and basically you&amp;rsquo;re always just copy-pasting a previous Makefile into the new one, or hoping an IDE or build tool abstracts away all that crap for you, which is why &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_build_automation_software&#34;&gt;this wheel has been reinvented many times&lt;/a&gt;. I generally don&amp;rsquo;t have a favorite build tool (they&amp;rsquo;re all bad), since it always seems to come down to a manual troubleshooting cycle of acquiring all the right dependencies. The worst is having a build system that is a big layer cake of scripts on top of XML on top of Makefiles.&lt;/p&gt;

&lt;p&gt;Rust package manager &amp;ldquo;Cargo&amp;rdquo; simply uses TOML files to describe what a Rust project needs in order to build, and when you build with Cargo, it just goes out and gets those dependencies for you. Plus, the packages are served from Crates.io, so if you&amp;rsquo;re keeping score that&amp;rsquo;s a double tech hipster bonus for using both the .io domain &lt;em&gt;and&lt;/em&gt; TOML.&lt;/p&gt;

&lt;h2 id=&#34;installation-and-hello-world&#34;&gt;Installation and Hello World&lt;/h2&gt;

&lt;p&gt;Assuming you&amp;rsquo;re using MacOS like me (there is plenty of info out there already for Windows and Linux users) and you have Homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ brew install rust
    $ rustc --version
    rustc 1.15.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You probably want an editor with Rust syntax highlighting and code completion. &lt;a href=&#34;https://areweideyet.com&#34;&gt;These are your choices&lt;/a&gt;. I went with Visual Studio Code, aka VS Code. It&amp;rsquo;s not what I&amp;rsquo;d call an IDE, and I still haven&amp;rsquo;t gotten it to integrate with a debugger, but hopefully JetBrains will step up and make a Rust IDE – once there is a market for it.&lt;/p&gt;

&lt;p&gt;VS Code doesn&amp;rsquo;t understand Rust out of the box. Launching VS Code, hit Command-P to open the in-app console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ext install vscode-rust
(install the top search result, should be the extension by kalitaalexey)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optionally, you can install a GDB/LLDB integration layer to attempt to debug from VS Code (in theory – YMMV but I haven&amp;rsquo;t gotten it to work for LLDB with C++ yet, let alone Rust):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ext install webfreak.debug
(install the top search result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice in the bottom right: “Rust tools are missing” … click install. It will invoke Cargo (the Rust package manager) to download, compile, and install more of the Rust toolchain for you: racer, rustfmt, rustsym, etc. And all of the dependencies for those. Go have a coffee, this will take a while. About 18 minutes on my system.&lt;/p&gt;

&lt;p&gt;Finally: close VS Code, and open up Terminal so we can put all these new Rust binaries on your $PATH.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ open -a /Applications/TextEdit.app ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the line &lt;code&gt;export PATH=&amp;quot;/Users/yourusername/.cargo/bin:$PATH&amp;quot;&lt;/code&gt; and save.&lt;/p&gt;

&lt;p&gt;Open a new instance of VS Code. It should no longer tell you that Rust tools are missing. 👍🏻&lt;/p&gt;

&lt;p&gt;Test the environment with a Hello World in Rust! Save the following as hello.rs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    println!(&amp;quot;Hello World!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &amp;ldquo;View -&amp;gt; Integrated Terminal.&amp;rdquo; From here you can compile by hand like a peasant, because VS Code isn’t an actual IDE.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash-3.2$ cd ~/Desktop
bash-3.2$ rustc hello.rs
bash-3.2$ ./hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But for a realistic scenario, we could have also used Cargo to both create a new Rust project and then build it.&lt;/p&gt;

&lt;p&gt;In a future post, I will share my thoughts on what it&amp;rsquo;s like to try to actually write a program in Rust.&lt;/p&gt;

&lt;h2 id=&#34;rust-references&#34;&gt;Rust References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rustbyexample.com/index.html&#34;&gt;Rust by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/README.html&#34;&gt;The Rust Programming Language&lt;/a&gt; (free e-book)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>